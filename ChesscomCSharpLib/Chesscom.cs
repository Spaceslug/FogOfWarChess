// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chesscom.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ChessCom {

  /// <summary>Holder for reflection information generated from chesscom.proto</summary>
  public static partial class ChesscomReflection {

    #region Descriptor
    /// <summary>File descriptor for chesscom.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ChesscomReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5jaGVzc2NvbS5wcm90bxIIY2hlc3Njb20aH2dvb2dsZS9wcm90b2J1Zi90",
            "aW1lc3RhbXAucHJvdG8iBgoEVm9pZCItCglIZWFydGJlYXQSDQoFYWxpdmUY",
            "ASABKAgSEQoJdXNlcnRva2VuGAIgASgJIhoKB01hdGNoSWQSDwoHbWF0Y2hJ",
            "ZBgBIAEoCSL6AQoLVmlzaW9uUnVsZXMSDwoHZW5hYmxlZBgBIAEoCBIYChB2",
            "aWV3X21vdmVfZmllbGRzGAIgASgIEhIKCnZpZXdfcmFuZ2UYAyABKAUSQgoP",
            "cGljZV9vdmVyd3JpdGVyGAQgAygLMikuY2hlc3Njb20uVmlzaW9uUnVsZXMu",
            "UGljZU92ZXJ3cml0ZXJFbnRyeRIaChJ2aWV3X2NhcHR1cmVfZmllbGQYBSAB",
            "KAgaTAoTUGljZU92ZXJ3cml0ZXJFbnRyeRILCgNrZXkYASABKAUSJAoFdmFs",
            "dWUYAiABKAsyFS5jaGVzc2NvbS5WaXNpb25SdWxlczoCOAEiSgoJVGltZVJ1",
            "bGVzEiMKC3BsYXllcl90aW1lGAIgASgLMg4uY2hlc3Njb20uVGltZRIYChBz",
            "ZWNvbmRzX3Blcl9tb3ZlGAMgASgFIrEBCglHYW1lUnVsZXMSKwoMdmlzaW9u",
            "X3J1bGVzGAEgASgLMhUuY2hlc3Njb20uVmlzaW9uUnVsZXMSJwoKdGltZV9y",
            "dWxlcxgCIAEoCzITLmNoZXNzY29tLlRpbWVSdWxlcxInCgpjaGVzc190eXBl",
            "GAMgASgOMhMuY2hlc3Njb20uQ2hlc3NUeXBlEiUKCXNpZGVfdHlwZRgEIAEo",
            "DjISLmNoZXNzY29tLlNpZGVUeXBlIocBCgpIb3N0ZWRHYW1lEicKCmdhbWVf",
            "cnVsZXMYASABKAsyEy5jaGVzc2NvbS5HYW1lUnVsZXMSCgoCaWQYBCABKAUS",
            "IAoEaG9zdBgIIAEoCzISLmNoZXNzY29tLlVzZXJEYXRhEiIKBmpvaW5lchgJ",
            "IAEoCzISLmNoZXNzY29tLlVzZXJEYXRhIpsBCg5Ib3N0ZWRHYW1lc01hcBI/",
            "Cgxob3N0ZWRfZ2FtZXMYASADKAsyKS5jaGVzc2NvbS5Ib3N0ZWRHYW1lc01h",
            "cC5Ib3N0ZWRHYW1lc0VudHJ5GkgKEEhvc3RlZEdhbWVzRW50cnkSCwoDa2V5",
            "GAEgASgFEiMKBXZhbHVlGAIgASgLMhQuY2hlc3Njb20uSG9zdGVkR2FtZToC",
            "OAEiKgoQSG9zdGVkR2FtZVJlc3VsdBIWCg5mb3VuZF9vcHBvbmVudBgBIAEo",
            "CCIoCgRUaW1lEg8KB21pbnV0ZXMYASABKAUSDwoHc2Vjb25kcxgCIAEoBSIa",
            "CgpGaWVsZE1vdmVzEgwKBGxpc3QYASADKAkinQgKBE1vdmUSDAoEZnJvbRgC",
            "IAEoCRIKCgJ0bxgDIAEoCRItCgl0aW1lc3RhbXAYBCABKAsyGi5nb29nbGUu",
            "cHJvdG9idWYuVGltZXN0YW1wEhAKCHNlY1NwZW50GAUgASgFEhMKC3doaXRl",
            "VmlzaW9uGAYgAygIEhMKC2JsYWNrVmlzaW9uGAcgAygIEh4KBXBpY2VzGAgg",
            "AygOMg8uY2hlc3Njb20uUGljZXMSOgoOYXZhaWxhYmxlTW92ZXMYCSADKAsy",
            "Ii5jaGVzc2NvbS5Nb3ZlLkF2YWlsYWJsZU1vdmVzRW50cnkSRgoUYXZhaWxh",
            "YmxlU2hhZG93TW92ZXMYCyADKAsyKC5jaGVzc2NvbS5Nb3ZlLkF2YWlsYWJs",
            "ZVNoYWRvd01vdmVzRW50cnkSJQoMY2FwdHVyZWRQaWNlGAogASgOMg8uY2hl",
            "c3Njb20uUGljZXMSPgoQd2hpdGVTaGFkb3dNb3ZlcxgMIAMoCzIkLmNoZXNz",
            "Y29tLk1vdmUuV2hpdGVTaGFkb3dNb3Zlc0VudHJ5Ej4KEGJsYWNrU2hhZG93",
            "TW92ZXMYDSADKAsyJC5jaGVzc2NvbS5Nb3ZlLkJsYWNrU2hhZG93TW92ZXNF",
            "bnRyeRIyCgp3aGl0ZU1vdmVzGA4gAygLMh4uY2hlc3Njb20uTW92ZS5XaGl0",
            "ZU1vdmVzRW50cnkSMgoKYmxhY2tNb3ZlcxgPIAMoCzIeLmNoZXNzY29tLk1v",
            "dmUuQmxhY2tNb3Zlc0VudHJ5Eg0KBWNoZWNrGBAgAygJGksKE0F2YWlsYWJs",
            "ZU1vdmVzRW50cnkSCwoDa2V5GAEgASgJEiMKBXZhbHVlGAIgASgLMhQuY2hl",
            "c3Njb20uRmllbGRNb3ZlczoCOAEaUQoZQXZhaWxhYmxlU2hhZG93TW92ZXNF",
            "bnRyeRILCgNrZXkYASABKAkSIwoFdmFsdWUYAiABKAsyFC5jaGVzc2NvbS5G",
            "aWVsZE1vdmVzOgI4ARpNChVXaGl0ZVNoYWRvd01vdmVzRW50cnkSCwoDa2V5",
            "GAEgASgJEiMKBXZhbHVlGAIgASgLMhQuY2hlc3Njb20uRmllbGRNb3ZlczoC",
            "OAEaTQoVQmxhY2tTaGFkb3dNb3Zlc0VudHJ5EgsKA2tleRgBIAEoCRIjCgV2",
            "YWx1ZRgCIAEoCzIULmNoZXNzY29tLkZpZWxkTW92ZXM6AjgBGkcKD1doaXRl",
            "TW92ZXNFbnRyeRILCgNrZXkYASABKAkSIwoFdmFsdWUYAiABKAsyFC5jaGVz",
            "c2NvbS5GaWVsZE1vdmVzOgI4ARpHCg9CbGFja01vdmVzRW50cnkSCwoDa2V5",
            "GAEgASgJEiMKBXZhbHVlGAIgASgLMhQuY2hlc3Njb20uRmllbGRNb3ZlczoC",
            "OAEi4QMKCUdhbWVTdGF0ZRIMCgRmcm9tGAIgASgJEgoKAnRvGAMgASgJEi0K",
            "CXRpbWVzdGFtcBgEIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAS",
            "EQoJc2VjX3NwZW50GAUgASgFEhUKDXBsYXllcl92aXNpb24YByADKAgSHgoF",
            "cGljZXMYCCADKA4yDy5jaGVzc2NvbS5QaWNlcxI6CgxwbGF5ZXJfbW92ZXMY",
            "CSADKAsyJC5jaGVzc2NvbS5HYW1lU3RhdGUuUGxheWVyTW92ZXNFbnRyeRI6",
            "CgxzaGFkb3dfbW92ZXMYCyADKAsyJC5jaGVzc2NvbS5HYW1lU3RhdGUuU2hh",
            "ZG93TW92ZXNFbnRyeRImCg1jYXB0dXJlZF9waWNlGAogASgOMg8uY2hlc3Nj",
            "b20uUGljZXMSDQoFY2hlY2sYECADKAkaSAoQUGxheWVyTW92ZXNFbnRyeRIL",
            "CgNrZXkYASABKAkSIwoFdmFsdWUYAiABKAsyFC5jaGVzc2NvbS5GaWVsZE1v",
            "dmVzOgI4ARpIChBTaGFkb3dNb3Zlc0VudHJ5EgsKA2tleRgBIAEoCRIjCgV2",
            "YWx1ZRgCIAEoCzIULmNoZXNzY29tLkZpZWxkTW92ZXM6AjgBIn4KCUxvZ2lu",
            "Rm9ybRIQCgh1c2VybmFtZRgBIAEoCRIaChJlbmNyeXB0ZWRfcGFzc3dvcmQY",
            "BSABKAkSFQoNbWFqb3JfdmVyc2lvbhgCIAEoCRIVCg1taW5vcl92ZXJzaW9u",
            "GAMgASgJEhUKDWJ1aWxkX3ZlcnNpb24YBCABKAkiZgoLTG9naW5SZXN1bHQS",
            "GQoRc3VjY2Vzc2Z1bGxfbG9naW4YASABKAgSFQoNbG9naW5fbWVzc2FnZRgE",
            "IAEoCRIlCgl1c2VyX2RhdGEYBSABKAsyEi5jaGVzc2NvbS5Vc2VyRGF0YSIh",
            "CgxVc2VySWRlbnRpdHkSEQoJdXNlcnRva2VuGAEgASgJIjwKCFVzZXJEYXRh",
            "EhAKCHVzZXJuYW1lGAEgASgJEhEKCXVzZXJ0b2tlbhgCIAEoCRILCgNlbG8Y",
            "AyABKAUiqQEKEkxvb2tGb3JNYXRjaFJlc3VsdBIOCgZzdWNjZXMYASABKAgS",
            "EwoLbWF0Y2hfdG9rZW4YAiABKAkSFwoPaXNfd2hpdGVfcGxheWVyGAMgASgI",
            "EiYKCWdhbWVSdWxlcxgHIAEoCzITLmNoZXNzY29tLkdhbWVSdWxlcxItChFv",
            "cHBvbmVudF91c2VyZGF0YRgIIAEoCzISLmNoZXNzY29tLlVzZXJEYXRhIq8B",
            "CgpNb3ZlUGFja2V0EhIKCmRvaW5nX21vdmUYASABKAgSHAoEbW92ZRgCIAEo",
            "CzIOLmNoZXNzY29tLk1vdmUSEQoJdXNlcnRva2VuGAMgASgJEhcKD2Fza2lu",
            "Z19mb3JfZHJhdxgEIAEoCBIuChBjaGVhdF9tYXRjaGV2ZW50GAUgASgOMhQu",
            "Y2hlc3Njb20uTWF0Y2hFdmVudBITCgttYXRjaF90b2tlbhgGIAEoCSKrAQoK",
            "TW92ZVJlc3VsdBIUCgxtb3ZlX2hhcHBuZWQYASABKAgSJwoKZ2FtZV9zdGF0",
            "ZRgCIAEoCzITLmNoZXNzY29tLkdhbWVTdGF0ZRIgChhvcHBvbmVudF9hc2tp",
            "bmdfZm9yX2RyYXcYBCABKAgSKQoLbWF0Y2hfZXZlbnQYBSABKA4yFC5jaGVz",
            "c2NvbS5NYXRjaEV2ZW50EhEKCXNlY3NfbGVmdBgGIAEoBSJBCg9Kb2luR2Ft",
            "ZVJlcXVlc3QSCgoCaWQYASABKAUSIgoGam9pbmVyGAIgASgLMhIuY2hlc3Nj",
            "b20uVXNlckRhdGEibAoLQ2hhdE1lc3NhZ2USGAoQc2VuZGVyX3VzZXJ0b2tl",
            "bhgBIAEoCRIXCg9zZW5kZXJfdXNlcm5hbWUYAiABKAkSGQoRcmVjaXZlcl91",
            "c2VydG9rZW4YAyABKAkSDwoHbWVzc2FnZRgEIAEoCSqXAQoKTWF0Y2hFdmVu",
            "dBIHCgNOb24QABIMCghXaGl0ZVdpbhABEgwKCEJsYWNrV2luEAISCAoERHJh",
            "dxADEhUKEVVuZXhwZWN0ZWRDbG9zaW5nEAQSFgoSV2hpdGVBc2tpbmdGb3JE",
            "cmF3EAUSFgoSQmxhY2tBc2tpbmdGb3JEcmF3EAYSEwoPRXhwZWN0ZWRDbG9z",
            "aW5nEAcqzwEKBVBpY2VzEggKBE5vbmUQABINCglCbGFja1Bhd24QARIPCgtC",
            "bGFja0tuaWdodBACEg8KC0JsYWNrQmlzaG9wEAMSDQoJQmxhY2tSb29rEAQS",
            "DgoKQmxhY2tRdWVlbhAFEg0KCUJsYWNrS2luZxAGEg0KCVdoaXRlUGF3bhAH",
            "Eg8KC1doaXRlS25pZ2h0EAgSDwoLV2hpdGVCaXNob3AQCRINCglXaGl0ZVJv",
            "b2sQChIOCgpXaGl0ZVF1ZWVuEAsSDQoJV2hpdGVLaW5nEAwqOgoJQ2hlc3NU",
            "eXBlEgsKB0NsYXNzaWMQABIQCgxGaXNoZXJSYW5kb20QARIOCgpTbHVnUmFu",
            "ZG9tEAIqOAoIU2lkZVR5cGUSDwoLSG9zdElzV2hpdGUQABIPCgtIb3N0SXNC",
            "bGFjaxABEgoKBlJhbmRvbRACMoMGCghDaGVzc0NvbRI1CgVMb2dpbhITLmNo",
            "ZXNzY29tLkxvZ2luRm9ybRoVLmNoZXNzY29tLkxvZ2luUmVzdWx0IgASRgoM",
            "TG9va0Zvck1hdGNoEhYuY2hlc3Njb20uVXNlcklkZW50aXR5GhwuY2hlc3Nj",
            "b20uTG9va0Zvck1hdGNoUmVzdWx0IgASOQoFTWF0Y2gSFC5jaGVzc2NvbS5N",
            "b3ZlUGFja2V0GhQuY2hlc3Njb20uTW92ZVJlc3VsdCIAKAEwARJHChFDaGF0",
            "TWVzc2FnZVN0cmVhbRIVLmNoZXNzY29tLkNoYXRNZXNzYWdlGhUuY2hlc3Nj",
            "b20uQ2hhdE1lc3NhZ2UiACgBMAESQAoISG9zdEdhbWUSFC5jaGVzc2NvbS5I",
            "b3N0ZWRHYW1lGhwuY2hlc3Njb20uTG9va0Zvck1hdGNoUmVzdWx0IgASPAoO",
            "QXZhaWxhYmxlR2FtZXMSDi5jaGVzc2NvbS5Wb2lkGhguY2hlc3Njb20uSG9z",
            "dGVkR2FtZXNNYXAiABJFCghKb2luR2FtZRIZLmNoZXNzY29tLkpvaW5HYW1l",
            "UmVxdWVzdBocLmNoZXNzY29tLkxvb2tGb3JNYXRjaFJlc3VsdCIAEjMKBUFs",
            "aXZlEhMuY2hlc3Njb20uSGVhcnRiZWF0GhMuY2hlc3Njb20uSGVhcnRiZWF0",
            "IgASQQoSTWF0Y2hFdmVudExpc3RlbmVyEhEuY2hlc3Njb20uTWF0Y2hJZBoU",
            "LmNoZXNzY29tLk1vdmVQYWNrZXQiADABEjIKCFNlbmRNb3ZlEhQuY2hlc3Nj",
            "b20uTW92ZVBhY2tldBoOLmNoZXNzY29tLlZvaWQiABJFChRDaGF0TWVzc2Fn",
            "ZUxpc3RlbnRlchISLmNoZXNzY29tLlVzZXJEYXRhGhUuY2hlc3Njb20uQ2hh",
            "dE1lc3NhZ2UiADABEjoKD1NlbmRDaGF0TWVzc2FnZRIVLmNoZXNzY29tLkNo",
            "YXRNZXNzYWdlGg4uY2hlc3Njb20uVm9pZCIAQguqAghDaGVzc0NvbWIGcHJv",
            "dG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::ChessCom.MatchEvent), typeof(global::ChessCom.Pices), typeof(global::ChessCom.ChessType), typeof(global::ChessCom.SideType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ChessCom.Void), global::ChessCom.Void.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChessCom.Heartbeat), global::ChessCom.Heartbeat.Parser, new[]{ "Alive", "Usertoken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChessCom.MatchId), global::ChessCom.MatchId.Parser, new[]{ "MatchId_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChessCom.VisionRules), global::ChessCom.VisionRules.Parser, new[]{ "Enabled", "ViewMoveFields", "ViewRange", "PiceOverwriter", "ViewCaptureField" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChessCom.TimeRules), global::ChessCom.TimeRules.Parser, new[]{ "PlayerTime", "SecondsPerMove" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChessCom.GameRules), global::ChessCom.GameRules.Parser, new[]{ "VisionRules", "TimeRules", "ChessType", "SideType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChessCom.HostedGame), global::ChessCom.HostedGame.Parser, new[]{ "GameRules", "Id", "Host", "Joiner" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChessCom.HostedGamesMap), global::ChessCom.HostedGamesMap.Parser, new[]{ "HostedGames" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChessCom.HostedGameResult), global::ChessCom.HostedGameResult.Parser, new[]{ "FoundOpponent" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChessCom.Time), global::ChessCom.Time.Parser, new[]{ "Minutes", "Seconds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChessCom.FieldMoves), global::ChessCom.FieldMoves.Parser, new[]{ "List" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChessCom.Move), global::ChessCom.Move.Parser, new[]{ "From", "To", "Timestamp", "SecSpent", "WhiteVision", "BlackVision", "Pices", "AvailableMoves", "AvailableShadowMoves", "CapturedPice", "WhiteShadowMoves", "BlackShadowMoves", "WhiteMoves", "BlackMoves", "Check" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, null, null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChessCom.GameState), global::ChessCom.GameState.Parser, new[]{ "From", "To", "Timestamp", "SecSpent", "PlayerVision", "Pices", "PlayerMoves", "ShadowMoves", "CapturedPice", "Check" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChessCom.LoginForm), global::ChessCom.LoginForm.Parser, new[]{ "Username", "EncryptedPassword", "MajorVersion", "MinorVersion", "BuildVersion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChessCom.LoginResult), global::ChessCom.LoginResult.Parser, new[]{ "SuccessfullLogin", "LoginMessage", "UserData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChessCom.UserIdentity), global::ChessCom.UserIdentity.Parser, new[]{ "Usertoken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChessCom.UserData), global::ChessCom.UserData.Parser, new[]{ "Username", "Usertoken", "Elo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChessCom.LookForMatchResult), global::ChessCom.LookForMatchResult.Parser, new[]{ "Succes", "MatchToken", "IsWhitePlayer", "GameRules", "OpponentUserdata" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChessCom.MovePacket), global::ChessCom.MovePacket.Parser, new[]{ "DoingMove", "Move", "Usertoken", "AskingForDraw", "CheatMatchevent", "MatchToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChessCom.MoveResult), global::ChessCom.MoveResult.Parser, new[]{ "MoveHappned", "GameState", "OpponentAskingForDraw", "MatchEvent", "SecsLeft" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChessCom.JoinGameRequest), global::ChessCom.JoinGameRequest.Parser, new[]{ "Id", "Joiner" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChessCom.ChatMessage), global::ChessCom.ChatMessage.Parser, new[]{ "SenderUsertoken", "SenderUsername", "ReciverUsertoken", "Message" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum MatchEvent {
    [pbr::OriginalName("Non")] Non = 0,
    [pbr::OriginalName("WhiteWin")] WhiteWin = 1,
    [pbr::OriginalName("BlackWin")] BlackWin = 2,
    [pbr::OriginalName("Draw")] Draw = 3,
    [pbr::OriginalName("UnexpectedClosing")] UnexpectedClosing = 4,
    [pbr::OriginalName("WhiteAskingForDraw")] WhiteAskingForDraw = 5,
    [pbr::OriginalName("BlackAskingForDraw")] BlackAskingForDraw = 6,
    /// <summary>
    ///AcceptingDraw = 6;
    /// </summary>
    [pbr::OriginalName("ExpectedClosing")] ExpectedClosing = 7,
  }

  public enum Pices {
    [pbr::OriginalName("None")] None = 0,
    [pbr::OriginalName("BlackPawn")] BlackPawn = 1,
    [pbr::OriginalName("BlackKnight")] BlackKnight = 2,
    [pbr::OriginalName("BlackBishop")] BlackBishop = 3,
    [pbr::OriginalName("BlackRook")] BlackRook = 4,
    [pbr::OriginalName("BlackQueen")] BlackQueen = 5,
    [pbr::OriginalName("BlackKing")] BlackKing = 6,
    [pbr::OriginalName("WhitePawn")] WhitePawn = 7,
    [pbr::OriginalName("WhiteKnight")] WhiteKnight = 8,
    [pbr::OriginalName("WhiteBishop")] WhiteBishop = 9,
    [pbr::OriginalName("WhiteRook")] WhiteRook = 10,
    [pbr::OriginalName("WhiteQueen")] WhiteQueen = 11,
    [pbr::OriginalName("WhiteKing")] WhiteKing = 12,
  }

  public enum ChessType {
    [pbr::OriginalName("Classic")] Classic = 0,
    [pbr::OriginalName("FisherRandom")] FisherRandom = 1,
    [pbr::OriginalName("SlugRandom")] SlugRandom = 2,
  }

  public enum SideType {
    [pbr::OriginalName("HostIsWhite")] HostIsWhite = 0,
    [pbr::OriginalName("HostIsBlack")] HostIsBlack = 1,
    [pbr::OriginalName("Random")] Random = 2,
  }

  #endregion

  #region Messages
  public sealed partial class Void : pb::IMessage<Void> {
    private static readonly pb::MessageParser<Void> _parser = new pb::MessageParser<Void>(() => new Void());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Void> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChessCom.ChesscomReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Void() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Void(Void other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Void Clone() {
      return new Void(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Void);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Void other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Void other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class Heartbeat : pb::IMessage<Heartbeat> {
    private static readonly pb::MessageParser<Heartbeat> _parser = new pb::MessageParser<Heartbeat>(() => new Heartbeat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heartbeat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChessCom.ChesscomReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heartbeat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heartbeat(Heartbeat other) : this() {
      alive_ = other.alive_;
      usertoken_ = other.usertoken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heartbeat Clone() {
      return new Heartbeat(this);
    }

    /// <summary>Field number for the "alive" field.</summary>
    public const int AliveFieldNumber = 1;
    private bool alive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Alive {
      get { return alive_; }
      set {
        alive_ = value;
      }
    }

    /// <summary>Field number for the "usertoken" field.</summary>
    public const int UsertokenFieldNumber = 2;
    private string usertoken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Usertoken {
      get { return usertoken_; }
      set {
        usertoken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heartbeat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heartbeat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Alive != other.Alive) return false;
      if (Usertoken != other.Usertoken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Alive != false) hash ^= Alive.GetHashCode();
      if (Usertoken.Length != 0) hash ^= Usertoken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Alive != false) {
        output.WriteRawTag(8);
        output.WriteBool(Alive);
      }
      if (Usertoken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Usertoken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Alive != false) {
        size += 1 + 1;
      }
      if (Usertoken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Usertoken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heartbeat other) {
      if (other == null) {
        return;
      }
      if (other.Alive != false) {
        Alive = other.Alive;
      }
      if (other.Usertoken.Length != 0) {
        Usertoken = other.Usertoken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Alive = input.ReadBool();
            break;
          }
          case 18: {
            Usertoken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MatchId : pb::IMessage<MatchId> {
    private static readonly pb::MessageParser<MatchId> _parser = new pb::MessageParser<MatchId>(() => new MatchId());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChessCom.ChesscomReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchId(MatchId other) : this() {
      matchId_ = other.matchId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchId Clone() {
      return new MatchId(this);
    }

    /// <summary>Field number for the "matchId" field.</summary>
    public const int MatchId_FieldNumber = 1;
    private string matchId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MatchId_ {
      get { return matchId_; }
      set {
        matchId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId_ != other.MatchId_) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchId_.Length != 0) hash ^= MatchId_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchId_.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MatchId_);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchId_.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchId_);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchId other) {
      if (other == null) {
        return;
      }
      if (other.MatchId_.Length != 0) {
        MatchId_ = other.MatchId_;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            MatchId_ = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VisionRules : pb::IMessage<VisionRules> {
    private static readonly pb::MessageParser<VisionRules> _parser = new pb::MessageParser<VisionRules>(() => new VisionRules());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VisionRules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChessCom.ChesscomReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisionRules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisionRules(VisionRules other) : this() {
      enabled_ = other.enabled_;
      viewMoveFields_ = other.viewMoveFields_;
      viewRange_ = other.viewRange_;
      piceOverwriter_ = other.piceOverwriter_.Clone();
      viewCaptureField_ = other.viewCaptureField_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisionRules Clone() {
      return new VisionRules(this);
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 1;
    private bool enabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    /// <summary>Field number for the "view_move_fields" field.</summary>
    public const int ViewMoveFieldsFieldNumber = 2;
    private bool viewMoveFields_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ViewMoveFields {
      get { return viewMoveFields_; }
      set {
        viewMoveFields_ = value;
      }
    }

    /// <summary>Field number for the "view_range" field.</summary>
    public const int ViewRangeFieldNumber = 3;
    private int viewRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ViewRange {
      get { return viewRange_; }
      set {
        viewRange_ = value;
      }
    }

    /// <summary>Field number for the "pice_overwriter" field.</summary>
    public const int PiceOverwriterFieldNumber = 4;
    private static readonly pbc::MapField<int, global::ChessCom.VisionRules>.Codec _map_piceOverwriter_codec
        = new pbc::MapField<int, global::ChessCom.VisionRules>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::ChessCom.VisionRules.Parser), 34);
    private readonly pbc::MapField<int, global::ChessCom.VisionRules> piceOverwriter_ = new pbc::MapField<int, global::ChessCom.VisionRules>();
    /// <summary>
    ///Must be a Pices value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::ChessCom.VisionRules> PiceOverwriter {
      get { return piceOverwriter_; }
    }

    /// <summary>Field number for the "view_capture_field" field.</summary>
    public const int ViewCaptureFieldFieldNumber = 5;
    private bool viewCaptureField_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ViewCaptureField {
      get { return viewCaptureField_; }
      set {
        viewCaptureField_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VisionRules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VisionRules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Enabled != other.Enabled) return false;
      if (ViewMoveFields != other.ViewMoveFields) return false;
      if (ViewRange != other.ViewRange) return false;
      if (!PiceOverwriter.Equals(other.PiceOverwriter)) return false;
      if (ViewCaptureField != other.ViewCaptureField) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Enabled != false) hash ^= Enabled.GetHashCode();
      if (ViewMoveFields != false) hash ^= ViewMoveFields.GetHashCode();
      if (ViewRange != 0) hash ^= ViewRange.GetHashCode();
      hash ^= PiceOverwriter.GetHashCode();
      if (ViewCaptureField != false) hash ^= ViewCaptureField.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Enabled != false) {
        output.WriteRawTag(8);
        output.WriteBool(Enabled);
      }
      if (ViewMoveFields != false) {
        output.WriteRawTag(16);
        output.WriteBool(ViewMoveFields);
      }
      if (ViewRange != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ViewRange);
      }
      piceOverwriter_.WriteTo(output, _map_piceOverwriter_codec);
      if (ViewCaptureField != false) {
        output.WriteRawTag(40);
        output.WriteBool(ViewCaptureField);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Enabled != false) {
        size += 1 + 1;
      }
      if (ViewMoveFields != false) {
        size += 1 + 1;
      }
      if (ViewRange != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ViewRange);
      }
      size += piceOverwriter_.CalculateSize(_map_piceOverwriter_codec);
      if (ViewCaptureField != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VisionRules other) {
      if (other == null) {
        return;
      }
      if (other.Enabled != false) {
        Enabled = other.Enabled;
      }
      if (other.ViewMoveFields != false) {
        ViewMoveFields = other.ViewMoveFields;
      }
      if (other.ViewRange != 0) {
        ViewRange = other.ViewRange;
      }
      piceOverwriter_.Add(other.piceOverwriter_);
      if (other.ViewCaptureField != false) {
        ViewCaptureField = other.ViewCaptureField;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Enabled = input.ReadBool();
            break;
          }
          case 16: {
            ViewMoveFields = input.ReadBool();
            break;
          }
          case 24: {
            ViewRange = input.ReadInt32();
            break;
          }
          case 34: {
            piceOverwriter_.AddEntriesFrom(input, _map_piceOverwriter_codec);
            break;
          }
          case 40: {
            ViewCaptureField = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TimeRules : pb::IMessage<TimeRules> {
    private static readonly pb::MessageParser<TimeRules> _parser = new pb::MessageParser<TimeRules>(() => new TimeRules());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TimeRules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChessCom.ChesscomReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeRules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeRules(TimeRules other) : this() {
      PlayerTime = other.playerTime_ != null ? other.PlayerTime.Clone() : null;
      secondsPerMove_ = other.secondsPerMove_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeRules Clone() {
      return new TimeRules(this);
    }

    /// <summary>Field number for the "player_time" field.</summary>
    public const int PlayerTimeFieldNumber = 2;
    private global::ChessCom.Time playerTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ChessCom.Time PlayerTime {
      get { return playerTime_; }
      set {
        playerTime_ = value;
      }
    }

    /// <summary>Field number for the "seconds_per_move" field.</summary>
    public const int SecondsPerMoveFieldNumber = 3;
    private int secondsPerMove_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SecondsPerMove {
      get { return secondsPerMove_; }
      set {
        secondsPerMove_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TimeRules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TimeRules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlayerTime, other.PlayerTime)) return false;
      if (SecondsPerMove != other.SecondsPerMove) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (playerTime_ != null) hash ^= PlayerTime.GetHashCode();
      if (SecondsPerMove != 0) hash ^= SecondsPerMove.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (playerTime_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PlayerTime);
      }
      if (SecondsPerMove != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SecondsPerMove);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (playerTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerTime);
      }
      if (SecondsPerMove != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SecondsPerMove);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TimeRules other) {
      if (other == null) {
        return;
      }
      if (other.playerTime_ != null) {
        if (playerTime_ == null) {
          playerTime_ = new global::ChessCom.Time();
        }
        PlayerTime.MergeFrom(other.PlayerTime);
      }
      if (other.SecondsPerMove != 0) {
        SecondsPerMove = other.SecondsPerMove;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            if (playerTime_ == null) {
              playerTime_ = new global::ChessCom.Time();
            }
            input.ReadMessage(playerTime_);
            break;
          }
          case 24: {
            SecondsPerMove = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameRules : pb::IMessage<GameRules> {
    private static readonly pb::MessageParser<GameRules> _parser = new pb::MessageParser<GameRules>(() => new GameRules());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameRules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChessCom.ChesscomReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameRules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameRules(GameRules other) : this() {
      VisionRules = other.visionRules_ != null ? other.VisionRules.Clone() : null;
      TimeRules = other.timeRules_ != null ? other.TimeRules.Clone() : null;
      chessType_ = other.chessType_;
      sideType_ = other.sideType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameRules Clone() {
      return new GameRules(this);
    }

    /// <summary>Field number for the "vision_rules" field.</summary>
    public const int VisionRulesFieldNumber = 1;
    private global::ChessCom.VisionRules visionRules_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ChessCom.VisionRules VisionRules {
      get { return visionRules_; }
      set {
        visionRules_ = value;
      }
    }

    /// <summary>Field number for the "time_rules" field.</summary>
    public const int TimeRulesFieldNumber = 2;
    private global::ChessCom.TimeRules timeRules_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ChessCom.TimeRules TimeRules {
      get { return timeRules_; }
      set {
        timeRules_ = value;
      }
    }

    /// <summary>Field number for the "chess_type" field.</summary>
    public const int ChessTypeFieldNumber = 3;
    private global::ChessCom.ChessType chessType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ChessCom.ChessType ChessType {
      get { return chessType_; }
      set {
        chessType_ = value;
      }
    }

    /// <summary>Field number for the "side_type" field.</summary>
    public const int SideTypeFieldNumber = 4;
    private global::ChessCom.SideType sideType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ChessCom.SideType SideType {
      get { return sideType_; }
      set {
        sideType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameRules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameRules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(VisionRules, other.VisionRules)) return false;
      if (!object.Equals(TimeRules, other.TimeRules)) return false;
      if (ChessType != other.ChessType) return false;
      if (SideType != other.SideType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (visionRules_ != null) hash ^= VisionRules.GetHashCode();
      if (timeRules_ != null) hash ^= TimeRules.GetHashCode();
      if (ChessType != 0) hash ^= ChessType.GetHashCode();
      if (SideType != 0) hash ^= SideType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (visionRules_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(VisionRules);
      }
      if (timeRules_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TimeRules);
      }
      if (ChessType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ChessType);
      }
      if (SideType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) SideType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (visionRules_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VisionRules);
      }
      if (timeRules_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimeRules);
      }
      if (ChessType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ChessType);
      }
      if (SideType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SideType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameRules other) {
      if (other == null) {
        return;
      }
      if (other.visionRules_ != null) {
        if (visionRules_ == null) {
          visionRules_ = new global::ChessCom.VisionRules();
        }
        VisionRules.MergeFrom(other.VisionRules);
      }
      if (other.timeRules_ != null) {
        if (timeRules_ == null) {
          timeRules_ = new global::ChessCom.TimeRules();
        }
        TimeRules.MergeFrom(other.TimeRules);
      }
      if (other.ChessType != 0) {
        ChessType = other.ChessType;
      }
      if (other.SideType != 0) {
        SideType = other.SideType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (visionRules_ == null) {
              visionRules_ = new global::ChessCom.VisionRules();
            }
            input.ReadMessage(visionRules_);
            break;
          }
          case 18: {
            if (timeRules_ == null) {
              timeRules_ = new global::ChessCom.TimeRules();
            }
            input.ReadMessage(timeRules_);
            break;
          }
          case 24: {
            chessType_ = (global::ChessCom.ChessType) input.ReadEnum();
            break;
          }
          case 32: {
            sideType_ = (global::ChessCom.SideType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HostedGame : pb::IMessage<HostedGame> {
    private static readonly pb::MessageParser<HostedGame> _parser = new pb::MessageParser<HostedGame>(() => new HostedGame());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HostedGame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChessCom.ChesscomReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HostedGame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HostedGame(HostedGame other) : this() {
      GameRules = other.gameRules_ != null ? other.GameRules.Clone() : null;
      id_ = other.id_;
      Host = other.host_ != null ? other.Host.Clone() : null;
      Joiner = other.joiner_ != null ? other.Joiner.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HostedGame Clone() {
      return new HostedGame(this);
    }

    /// <summary>Field number for the "game_rules" field.</summary>
    public const int GameRulesFieldNumber = 1;
    private global::ChessCom.GameRules gameRules_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ChessCom.GameRules GameRules {
      get { return gameRules_; }
      set {
        gameRules_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 4;
    private int id_;
    /// <summary>
    ///string hostUsertoken = 2;
    ///string joinerUsertoken = 3;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "host" field.</summary>
    public const int HostFieldNumber = 8;
    private global::ChessCom.UserData host_;
    /// <summary>
    ///string hostUsername = 5;
    ///string joinerUsername = 6;
    ///int32 hostElo = 7;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ChessCom.UserData Host {
      get { return host_; }
      set {
        host_ = value;
      }
    }

    /// <summary>Field number for the "joiner" field.</summary>
    public const int JoinerFieldNumber = 9;
    private global::ChessCom.UserData joiner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ChessCom.UserData Joiner {
      get { return joiner_; }
      set {
        joiner_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HostedGame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HostedGame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GameRules, other.GameRules)) return false;
      if (Id != other.Id) return false;
      if (!object.Equals(Host, other.Host)) return false;
      if (!object.Equals(Joiner, other.Joiner)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (gameRules_ != null) hash ^= GameRules.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (host_ != null) hash ^= Host.GetHashCode();
      if (joiner_ != null) hash ^= Joiner.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (gameRules_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GameRules);
      }
      if (Id != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Id);
      }
      if (host_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Host);
      }
      if (joiner_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Joiner);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (gameRules_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameRules);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (host_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Host);
      }
      if (joiner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Joiner);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HostedGame other) {
      if (other == null) {
        return;
      }
      if (other.gameRules_ != null) {
        if (gameRules_ == null) {
          gameRules_ = new global::ChessCom.GameRules();
        }
        GameRules.MergeFrom(other.GameRules);
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.host_ != null) {
        if (host_ == null) {
          host_ = new global::ChessCom.UserData();
        }
        Host.MergeFrom(other.Host);
      }
      if (other.joiner_ != null) {
        if (joiner_ == null) {
          joiner_ = new global::ChessCom.UserData();
        }
        Joiner.MergeFrom(other.Joiner);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (gameRules_ == null) {
              gameRules_ = new global::ChessCom.GameRules();
            }
            input.ReadMessage(gameRules_);
            break;
          }
          case 32: {
            Id = input.ReadInt32();
            break;
          }
          case 66: {
            if (host_ == null) {
              host_ = new global::ChessCom.UserData();
            }
            input.ReadMessage(host_);
            break;
          }
          case 74: {
            if (joiner_ == null) {
              joiner_ = new global::ChessCom.UserData();
            }
            input.ReadMessage(joiner_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class HostedGamesMap : pb::IMessage<HostedGamesMap> {
    private static readonly pb::MessageParser<HostedGamesMap> _parser = new pb::MessageParser<HostedGamesMap>(() => new HostedGamesMap());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HostedGamesMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChessCom.ChesscomReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HostedGamesMap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HostedGamesMap(HostedGamesMap other) : this() {
      hostedGames_ = other.hostedGames_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HostedGamesMap Clone() {
      return new HostedGamesMap(this);
    }

    /// <summary>Field number for the "hosted_games" field.</summary>
    public const int HostedGamesFieldNumber = 1;
    private static readonly pbc::MapField<int, global::ChessCom.HostedGame>.Codec _map_hostedGames_codec
        = new pbc::MapField<int, global::ChessCom.HostedGame>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::ChessCom.HostedGame.Parser), 10);
    private readonly pbc::MapField<int, global::ChessCom.HostedGame> hostedGames_ = new pbc::MapField<int, global::ChessCom.HostedGame>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::ChessCom.HostedGame> HostedGames {
      get { return hostedGames_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HostedGamesMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HostedGamesMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!HostedGames.Equals(other.HostedGames)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= HostedGames.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      hostedGames_.WriteTo(output, _map_hostedGames_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += hostedGames_.CalculateSize(_map_hostedGames_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HostedGamesMap other) {
      if (other == null) {
        return;
      }
      hostedGames_.Add(other.hostedGames_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            hostedGames_.AddEntriesFrom(input, _map_hostedGames_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class HostedGameResult : pb::IMessage<HostedGameResult> {
    private static readonly pb::MessageParser<HostedGameResult> _parser = new pb::MessageParser<HostedGameResult>(() => new HostedGameResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HostedGameResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChessCom.ChesscomReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HostedGameResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HostedGameResult(HostedGameResult other) : this() {
      foundOpponent_ = other.foundOpponent_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HostedGameResult Clone() {
      return new HostedGameResult(this);
    }

    /// <summary>Field number for the "found_opponent" field.</summary>
    public const int FoundOpponentFieldNumber = 1;
    private bool foundOpponent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FoundOpponent {
      get { return foundOpponent_; }
      set {
        foundOpponent_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HostedGameResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HostedGameResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FoundOpponent != other.FoundOpponent) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FoundOpponent != false) hash ^= FoundOpponent.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FoundOpponent != false) {
        output.WriteRawTag(8);
        output.WriteBool(FoundOpponent);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FoundOpponent != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HostedGameResult other) {
      if (other == null) {
        return;
      }
      if (other.FoundOpponent != false) {
        FoundOpponent = other.FoundOpponent;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FoundOpponent = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Time : pb::IMessage<Time> {
    private static readonly pb::MessageParser<Time> _parser = new pb::MessageParser<Time>(() => new Time());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Time> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChessCom.ChesscomReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Time() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Time(Time other) : this() {
      minutes_ = other.minutes_;
      seconds_ = other.seconds_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Time Clone() {
      return new Time(this);
    }

    /// <summary>Field number for the "minutes" field.</summary>
    public const int MinutesFieldNumber = 1;
    private int minutes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Minutes {
      get { return minutes_; }
      set {
        minutes_ = value;
      }
    }

    /// <summary>Field number for the "seconds" field.</summary>
    public const int SecondsFieldNumber = 2;
    private int seconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Seconds {
      get { return seconds_; }
      set {
        seconds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Time);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Time other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Minutes != other.Minutes) return false;
      if (Seconds != other.Seconds) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Minutes != 0) hash ^= Minutes.GetHashCode();
      if (Seconds != 0) hash ^= Seconds.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Minutes != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Minutes);
      }
      if (Seconds != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Seconds);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Minutes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Minutes);
      }
      if (Seconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seconds);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Time other) {
      if (other == null) {
        return;
      }
      if (other.Minutes != 0) {
        Minutes = other.Minutes;
      }
      if (other.Seconds != 0) {
        Seconds = other.Seconds;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Minutes = input.ReadInt32();
            break;
          }
          case 16: {
            Seconds = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FieldMoves : pb::IMessage<FieldMoves> {
    private static readonly pb::MessageParser<FieldMoves> _parser = new pb::MessageParser<FieldMoves>(() => new FieldMoves());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FieldMoves> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChessCom.ChesscomReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldMoves() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldMoves(FieldMoves other) : this() {
      list_ = other.list_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldMoves Clone() {
      return new FieldMoves(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_list_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> list_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FieldMoves);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FieldMoves other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FieldMoves other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Move : pb::IMessage<Move> {
    private static readonly pb::MessageParser<Move> _parser = new pb::MessageParser<Move>(() => new Move());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Move> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChessCom.ChesscomReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Move() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Move(Move other) : this() {
      from_ = other.from_;
      to_ = other.to_;
      Timestamp = other.timestamp_ != null ? other.Timestamp.Clone() : null;
      secSpent_ = other.secSpent_;
      whiteVision_ = other.whiteVision_.Clone();
      blackVision_ = other.blackVision_.Clone();
      pices_ = other.pices_.Clone();
      availableMoves_ = other.availableMoves_.Clone();
      availableShadowMoves_ = other.availableShadowMoves_.Clone();
      capturedPice_ = other.capturedPice_;
      whiteShadowMoves_ = other.whiteShadowMoves_.Clone();
      blackShadowMoves_ = other.blackShadowMoves_.Clone();
      whiteMoves_ = other.whiteMoves_.Clone();
      blackMoves_ = other.blackMoves_.Clone();
      check_ = other.check_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Move Clone() {
      return new Move(this);
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 2;
    private string from_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string From {
      get { return from_; }
      set {
        from_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 3;
    private string to_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string To {
      get { return to_; }
      set {
        to_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "secSpent" field.</summary>
    public const int SecSpentFieldNumber = 5;
    private int secSpent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SecSpent {
      get { return secSpent_; }
      set {
        secSpent_ = value;
      }
    }

    /// <summary>Field number for the "whiteVision" field.</summary>
    public const int WhiteVisionFieldNumber = 6;
    private static readonly pb::FieldCodec<bool> _repeated_whiteVision_codec
        = pb::FieldCodec.ForBool(50);
    private readonly pbc::RepeatedField<bool> whiteVision_ = new pbc::RepeatedField<bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<bool> WhiteVision {
      get { return whiteVision_; }
    }

    /// <summary>Field number for the "blackVision" field.</summary>
    public const int BlackVisionFieldNumber = 7;
    private static readonly pb::FieldCodec<bool> _repeated_blackVision_codec
        = pb::FieldCodec.ForBool(58);
    private readonly pbc::RepeatedField<bool> blackVision_ = new pbc::RepeatedField<bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<bool> BlackVision {
      get { return blackVision_; }
    }

    /// <summary>Field number for the "pices" field.</summary>
    public const int PicesFieldNumber = 8;
    private static readonly pb::FieldCodec<global::ChessCom.Pices> _repeated_pices_codec
        = pb::FieldCodec.ForEnum(66, x => (int) x, x => (global::ChessCom.Pices) x);
    private readonly pbc::RepeatedField<global::ChessCom.Pices> pices_ = new pbc::RepeatedField<global::ChessCom.Pices>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ChessCom.Pices> Pices {
      get { return pices_; }
    }

    /// <summary>Field number for the "availableMoves" field.</summary>
    public const int AvailableMovesFieldNumber = 9;
    private static readonly pbc::MapField<string, global::ChessCom.FieldMoves>.Codec _map_availableMoves_codec
        = new pbc::MapField<string, global::ChessCom.FieldMoves>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::ChessCom.FieldMoves.Parser), 74);
    private readonly pbc::MapField<string, global::ChessCom.FieldMoves> availableMoves_ = new pbc::MapField<string, global::ChessCom.FieldMoves>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::ChessCom.FieldMoves> AvailableMoves {
      get { return availableMoves_; }
    }

    /// <summary>Field number for the "availableShadowMoves" field.</summary>
    public const int AvailableShadowMovesFieldNumber = 11;
    private static readonly pbc::MapField<string, global::ChessCom.FieldMoves>.Codec _map_availableShadowMoves_codec
        = new pbc::MapField<string, global::ChessCom.FieldMoves>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::ChessCom.FieldMoves.Parser), 90);
    private readonly pbc::MapField<string, global::ChessCom.FieldMoves> availableShadowMoves_ = new pbc::MapField<string, global::ChessCom.FieldMoves>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::ChessCom.FieldMoves> AvailableShadowMoves {
      get { return availableShadowMoves_; }
    }

    /// <summary>Field number for the "capturedPice" field.</summary>
    public const int CapturedPiceFieldNumber = 10;
    private global::ChessCom.Pices capturedPice_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ChessCom.Pices CapturedPice {
      get { return capturedPice_; }
      set {
        capturedPice_ = value;
      }
    }

    /// <summary>Field number for the "whiteShadowMoves" field.</summary>
    public const int WhiteShadowMovesFieldNumber = 12;
    private static readonly pbc::MapField<string, global::ChessCom.FieldMoves>.Codec _map_whiteShadowMoves_codec
        = new pbc::MapField<string, global::ChessCom.FieldMoves>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::ChessCom.FieldMoves.Parser), 98);
    private readonly pbc::MapField<string, global::ChessCom.FieldMoves> whiteShadowMoves_ = new pbc::MapField<string, global::ChessCom.FieldMoves>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::ChessCom.FieldMoves> WhiteShadowMoves {
      get { return whiteShadowMoves_; }
    }

    /// <summary>Field number for the "blackShadowMoves" field.</summary>
    public const int BlackShadowMovesFieldNumber = 13;
    private static readonly pbc::MapField<string, global::ChessCom.FieldMoves>.Codec _map_blackShadowMoves_codec
        = new pbc::MapField<string, global::ChessCom.FieldMoves>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::ChessCom.FieldMoves.Parser), 106);
    private readonly pbc::MapField<string, global::ChessCom.FieldMoves> blackShadowMoves_ = new pbc::MapField<string, global::ChessCom.FieldMoves>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::ChessCom.FieldMoves> BlackShadowMoves {
      get { return blackShadowMoves_; }
    }

    /// <summary>Field number for the "whiteMoves" field.</summary>
    public const int WhiteMovesFieldNumber = 14;
    private static readonly pbc::MapField<string, global::ChessCom.FieldMoves>.Codec _map_whiteMoves_codec
        = new pbc::MapField<string, global::ChessCom.FieldMoves>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::ChessCom.FieldMoves.Parser), 114);
    private readonly pbc::MapField<string, global::ChessCom.FieldMoves> whiteMoves_ = new pbc::MapField<string, global::ChessCom.FieldMoves>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::ChessCom.FieldMoves> WhiteMoves {
      get { return whiteMoves_; }
    }

    /// <summary>Field number for the "blackMoves" field.</summary>
    public const int BlackMovesFieldNumber = 15;
    private static readonly pbc::MapField<string, global::ChessCom.FieldMoves>.Codec _map_blackMoves_codec
        = new pbc::MapField<string, global::ChessCom.FieldMoves>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::ChessCom.FieldMoves.Parser), 122);
    private readonly pbc::MapField<string, global::ChessCom.FieldMoves> blackMoves_ = new pbc::MapField<string, global::ChessCom.FieldMoves>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::ChessCom.FieldMoves> BlackMoves {
      get { return blackMoves_; }
    }

    /// <summary>Field number for the "check" field.</summary>
    public const int CheckFieldNumber = 16;
    private static readonly pb::FieldCodec<string> _repeated_check_codec
        = pb::FieldCodec.ForString(130);
    private readonly pbc::RepeatedField<string> check_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Check {
      get { return check_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Move);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Move other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (From != other.From) return false;
      if (To != other.To) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (SecSpent != other.SecSpent) return false;
      if(!whiteVision_.Equals(other.whiteVision_)) return false;
      if(!blackVision_.Equals(other.blackVision_)) return false;
      if(!pices_.Equals(other.pices_)) return false;
      if (!AvailableMoves.Equals(other.AvailableMoves)) return false;
      if (!AvailableShadowMoves.Equals(other.AvailableShadowMoves)) return false;
      if (CapturedPice != other.CapturedPice) return false;
      if (!WhiteShadowMoves.Equals(other.WhiteShadowMoves)) return false;
      if (!BlackShadowMoves.Equals(other.BlackShadowMoves)) return false;
      if (!WhiteMoves.Equals(other.WhiteMoves)) return false;
      if (!BlackMoves.Equals(other.BlackMoves)) return false;
      if(!check_.Equals(other.check_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (From.Length != 0) hash ^= From.GetHashCode();
      if (To.Length != 0) hash ^= To.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (SecSpent != 0) hash ^= SecSpent.GetHashCode();
      hash ^= whiteVision_.GetHashCode();
      hash ^= blackVision_.GetHashCode();
      hash ^= pices_.GetHashCode();
      hash ^= AvailableMoves.GetHashCode();
      hash ^= AvailableShadowMoves.GetHashCode();
      if (CapturedPice != 0) hash ^= CapturedPice.GetHashCode();
      hash ^= WhiteShadowMoves.GetHashCode();
      hash ^= BlackShadowMoves.GetHashCode();
      hash ^= WhiteMoves.GetHashCode();
      hash ^= BlackMoves.GetHashCode();
      hash ^= check_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (From.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(From);
      }
      if (To.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(To);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Timestamp);
      }
      if (SecSpent != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SecSpent);
      }
      whiteVision_.WriteTo(output, _repeated_whiteVision_codec);
      blackVision_.WriteTo(output, _repeated_blackVision_codec);
      pices_.WriteTo(output, _repeated_pices_codec);
      availableMoves_.WriteTo(output, _map_availableMoves_codec);
      if (CapturedPice != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) CapturedPice);
      }
      availableShadowMoves_.WriteTo(output, _map_availableShadowMoves_codec);
      whiteShadowMoves_.WriteTo(output, _map_whiteShadowMoves_codec);
      blackShadowMoves_.WriteTo(output, _map_blackShadowMoves_codec);
      whiteMoves_.WriteTo(output, _map_whiteMoves_codec);
      blackMoves_.WriteTo(output, _map_blackMoves_codec);
      check_.WriteTo(output, _repeated_check_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (From.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(From);
      }
      if (To.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(To);
      }
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (SecSpent != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SecSpent);
      }
      size += whiteVision_.CalculateSize(_repeated_whiteVision_codec);
      size += blackVision_.CalculateSize(_repeated_blackVision_codec);
      size += pices_.CalculateSize(_repeated_pices_codec);
      size += availableMoves_.CalculateSize(_map_availableMoves_codec);
      size += availableShadowMoves_.CalculateSize(_map_availableShadowMoves_codec);
      if (CapturedPice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CapturedPice);
      }
      size += whiteShadowMoves_.CalculateSize(_map_whiteShadowMoves_codec);
      size += blackShadowMoves_.CalculateSize(_map_blackShadowMoves_codec);
      size += whiteMoves_.CalculateSize(_map_whiteMoves_codec);
      size += blackMoves_.CalculateSize(_map_blackMoves_codec);
      size += check_.CalculateSize(_repeated_check_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Move other) {
      if (other == null) {
        return;
      }
      if (other.From.Length != 0) {
        From = other.From;
      }
      if (other.To.Length != 0) {
        To = other.To;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          timestamp_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      if (other.SecSpent != 0) {
        SecSpent = other.SecSpent;
      }
      whiteVision_.Add(other.whiteVision_);
      blackVision_.Add(other.blackVision_);
      pices_.Add(other.pices_);
      availableMoves_.Add(other.availableMoves_);
      availableShadowMoves_.Add(other.availableShadowMoves_);
      if (other.CapturedPice != 0) {
        CapturedPice = other.CapturedPice;
      }
      whiteShadowMoves_.Add(other.whiteShadowMoves_);
      blackShadowMoves_.Add(other.blackShadowMoves_);
      whiteMoves_.Add(other.whiteMoves_);
      blackMoves_.Add(other.blackMoves_);
      check_.Add(other.check_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            From = input.ReadString();
            break;
          }
          case 26: {
            To = input.ReadString();
            break;
          }
          case 34: {
            if (timestamp_ == null) {
              timestamp_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(timestamp_);
            break;
          }
          case 40: {
            SecSpent = input.ReadInt32();
            break;
          }
          case 50:
          case 48: {
            whiteVision_.AddEntriesFrom(input, _repeated_whiteVision_codec);
            break;
          }
          case 58:
          case 56: {
            blackVision_.AddEntriesFrom(input, _repeated_blackVision_codec);
            break;
          }
          case 66:
          case 64: {
            pices_.AddEntriesFrom(input, _repeated_pices_codec);
            break;
          }
          case 74: {
            availableMoves_.AddEntriesFrom(input, _map_availableMoves_codec);
            break;
          }
          case 80: {
            capturedPice_ = (global::ChessCom.Pices) input.ReadEnum();
            break;
          }
          case 90: {
            availableShadowMoves_.AddEntriesFrom(input, _map_availableShadowMoves_codec);
            break;
          }
          case 98: {
            whiteShadowMoves_.AddEntriesFrom(input, _map_whiteShadowMoves_codec);
            break;
          }
          case 106: {
            blackShadowMoves_.AddEntriesFrom(input, _map_blackShadowMoves_codec);
            break;
          }
          case 114: {
            whiteMoves_.AddEntriesFrom(input, _map_whiteMoves_codec);
            break;
          }
          case 122: {
            blackMoves_.AddEntriesFrom(input, _map_blackMoves_codec);
            break;
          }
          case 130: {
            check_.AddEntriesFrom(input, _repeated_check_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameState : pb::IMessage<GameState> {
    private static readonly pb::MessageParser<GameState> _parser = new pb::MessageParser<GameState>(() => new GameState());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChessCom.ChesscomReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameState(GameState other) : this() {
      from_ = other.from_;
      to_ = other.to_;
      Timestamp = other.timestamp_ != null ? other.Timestamp.Clone() : null;
      secSpent_ = other.secSpent_;
      playerVision_ = other.playerVision_.Clone();
      pices_ = other.pices_.Clone();
      playerMoves_ = other.playerMoves_.Clone();
      shadowMoves_ = other.shadowMoves_.Clone();
      capturedPice_ = other.capturedPice_;
      check_ = other.check_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameState Clone() {
      return new GameState(this);
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 2;
    private string from_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string From {
      get { return from_; }
      set {
        from_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 3;
    private string to_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string To {
      get { return to_; }
      set {
        to_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "sec_spent" field.</summary>
    public const int SecSpentFieldNumber = 5;
    private int secSpent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SecSpent {
      get { return secSpent_; }
      set {
        secSpent_ = value;
      }
    }

    /// <summary>Field number for the "player_vision" field.</summary>
    public const int PlayerVisionFieldNumber = 7;
    private static readonly pb::FieldCodec<bool> _repeated_playerVision_codec
        = pb::FieldCodec.ForBool(58);
    private readonly pbc::RepeatedField<bool> playerVision_ = new pbc::RepeatedField<bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<bool> PlayerVision {
      get { return playerVision_; }
    }

    /// <summary>Field number for the "pices" field.</summary>
    public const int PicesFieldNumber = 8;
    private static readonly pb::FieldCodec<global::ChessCom.Pices> _repeated_pices_codec
        = pb::FieldCodec.ForEnum(66, x => (int) x, x => (global::ChessCom.Pices) x);
    private readonly pbc::RepeatedField<global::ChessCom.Pices> pices_ = new pbc::RepeatedField<global::ChessCom.Pices>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ChessCom.Pices> Pices {
      get { return pices_; }
    }

    /// <summary>Field number for the "player_moves" field.</summary>
    public const int PlayerMovesFieldNumber = 9;
    private static readonly pbc::MapField<string, global::ChessCom.FieldMoves>.Codec _map_playerMoves_codec
        = new pbc::MapField<string, global::ChessCom.FieldMoves>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::ChessCom.FieldMoves.Parser), 74);
    private readonly pbc::MapField<string, global::ChessCom.FieldMoves> playerMoves_ = new pbc::MapField<string, global::ChessCom.FieldMoves>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::ChessCom.FieldMoves> PlayerMoves {
      get { return playerMoves_; }
    }

    /// <summary>Field number for the "shadow_moves" field.</summary>
    public const int ShadowMovesFieldNumber = 11;
    private static readonly pbc::MapField<string, global::ChessCom.FieldMoves>.Codec _map_shadowMoves_codec
        = new pbc::MapField<string, global::ChessCom.FieldMoves>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::ChessCom.FieldMoves.Parser), 90);
    private readonly pbc::MapField<string, global::ChessCom.FieldMoves> shadowMoves_ = new pbc::MapField<string, global::ChessCom.FieldMoves>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::ChessCom.FieldMoves> ShadowMoves {
      get { return shadowMoves_; }
    }

    /// <summary>Field number for the "captured_pice" field.</summary>
    public const int CapturedPiceFieldNumber = 10;
    private global::ChessCom.Pices capturedPice_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ChessCom.Pices CapturedPice {
      get { return capturedPice_; }
      set {
        capturedPice_ = value;
      }
    }

    /// <summary>Field number for the "check" field.</summary>
    public const int CheckFieldNumber = 16;
    private static readonly pb::FieldCodec<string> _repeated_check_codec
        = pb::FieldCodec.ForString(130);
    private readonly pbc::RepeatedField<string> check_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Check {
      get { return check_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (From != other.From) return false;
      if (To != other.To) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (SecSpent != other.SecSpent) return false;
      if(!playerVision_.Equals(other.playerVision_)) return false;
      if(!pices_.Equals(other.pices_)) return false;
      if (!PlayerMoves.Equals(other.PlayerMoves)) return false;
      if (!ShadowMoves.Equals(other.ShadowMoves)) return false;
      if (CapturedPice != other.CapturedPice) return false;
      if(!check_.Equals(other.check_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (From.Length != 0) hash ^= From.GetHashCode();
      if (To.Length != 0) hash ^= To.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (SecSpent != 0) hash ^= SecSpent.GetHashCode();
      hash ^= playerVision_.GetHashCode();
      hash ^= pices_.GetHashCode();
      hash ^= PlayerMoves.GetHashCode();
      hash ^= ShadowMoves.GetHashCode();
      if (CapturedPice != 0) hash ^= CapturedPice.GetHashCode();
      hash ^= check_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (From.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(From);
      }
      if (To.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(To);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Timestamp);
      }
      if (SecSpent != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SecSpent);
      }
      playerVision_.WriteTo(output, _repeated_playerVision_codec);
      pices_.WriteTo(output, _repeated_pices_codec);
      playerMoves_.WriteTo(output, _map_playerMoves_codec);
      if (CapturedPice != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) CapturedPice);
      }
      shadowMoves_.WriteTo(output, _map_shadowMoves_codec);
      check_.WriteTo(output, _repeated_check_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (From.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(From);
      }
      if (To.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(To);
      }
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (SecSpent != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SecSpent);
      }
      size += playerVision_.CalculateSize(_repeated_playerVision_codec);
      size += pices_.CalculateSize(_repeated_pices_codec);
      size += playerMoves_.CalculateSize(_map_playerMoves_codec);
      size += shadowMoves_.CalculateSize(_map_shadowMoves_codec);
      if (CapturedPice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CapturedPice);
      }
      size += check_.CalculateSize(_repeated_check_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameState other) {
      if (other == null) {
        return;
      }
      if (other.From.Length != 0) {
        From = other.From;
      }
      if (other.To.Length != 0) {
        To = other.To;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          timestamp_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      if (other.SecSpent != 0) {
        SecSpent = other.SecSpent;
      }
      playerVision_.Add(other.playerVision_);
      pices_.Add(other.pices_);
      playerMoves_.Add(other.playerMoves_);
      shadowMoves_.Add(other.shadowMoves_);
      if (other.CapturedPice != 0) {
        CapturedPice = other.CapturedPice;
      }
      check_.Add(other.check_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            From = input.ReadString();
            break;
          }
          case 26: {
            To = input.ReadString();
            break;
          }
          case 34: {
            if (timestamp_ == null) {
              timestamp_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(timestamp_);
            break;
          }
          case 40: {
            SecSpent = input.ReadInt32();
            break;
          }
          case 58:
          case 56: {
            playerVision_.AddEntriesFrom(input, _repeated_playerVision_codec);
            break;
          }
          case 66:
          case 64: {
            pices_.AddEntriesFrom(input, _repeated_pices_codec);
            break;
          }
          case 74: {
            playerMoves_.AddEntriesFrom(input, _map_playerMoves_codec);
            break;
          }
          case 80: {
            capturedPice_ = (global::ChessCom.Pices) input.ReadEnum();
            break;
          }
          case 90: {
            shadowMoves_.AddEntriesFrom(input, _map_shadowMoves_codec);
            break;
          }
          case 130: {
            check_.AddEntriesFrom(input, _repeated_check_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginForm : pb::IMessage<LoginForm> {
    private static readonly pb::MessageParser<LoginForm> _parser = new pb::MessageParser<LoginForm>(() => new LoginForm());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginForm> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChessCom.ChesscomReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginForm() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginForm(LoginForm other) : this() {
      username_ = other.username_;
      encryptedPassword_ = other.encryptedPassword_;
      majorVersion_ = other.majorVersion_;
      minorVersion_ = other.minorVersion_;
      buildVersion_ = other.buildVersion_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginForm Clone() {
      return new LoginForm(this);
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 1;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encrypted_password" field.</summary>
    public const int EncryptedPasswordFieldNumber = 5;
    private string encryptedPassword_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EncryptedPassword {
      get { return encryptedPassword_; }
      set {
        encryptedPassword_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "major_version" field.</summary>
    public const int MajorVersionFieldNumber = 2;
    private string majorVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MajorVersion {
      get { return majorVersion_; }
      set {
        majorVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "minor_version" field.</summary>
    public const int MinorVersionFieldNumber = 3;
    private string minorVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MinorVersion {
      get { return minorVersion_; }
      set {
        minorVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "build_version" field.</summary>
    public const int BuildVersionFieldNumber = 4;
    private string buildVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BuildVersion {
      get { return buildVersion_; }
      set {
        buildVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginForm);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginForm other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Username != other.Username) return false;
      if (EncryptedPassword != other.EncryptedPassword) return false;
      if (MajorVersion != other.MajorVersion) return false;
      if (MinorVersion != other.MinorVersion) return false;
      if (BuildVersion != other.BuildVersion) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (EncryptedPassword.Length != 0) hash ^= EncryptedPassword.GetHashCode();
      if (MajorVersion.Length != 0) hash ^= MajorVersion.GetHashCode();
      if (MinorVersion.Length != 0) hash ^= MinorVersion.GetHashCode();
      if (BuildVersion.Length != 0) hash ^= BuildVersion.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Username.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Username);
      }
      if (MajorVersion.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MajorVersion);
      }
      if (MinorVersion.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MinorVersion);
      }
      if (BuildVersion.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(BuildVersion);
      }
      if (EncryptedPassword.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(EncryptedPassword);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (EncryptedPassword.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EncryptedPassword);
      }
      if (MajorVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MajorVersion);
      }
      if (MinorVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MinorVersion);
      }
      if (BuildVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BuildVersion);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginForm other) {
      if (other == null) {
        return;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.EncryptedPassword.Length != 0) {
        EncryptedPassword = other.EncryptedPassword;
      }
      if (other.MajorVersion.Length != 0) {
        MajorVersion = other.MajorVersion;
      }
      if (other.MinorVersion.Length != 0) {
        MinorVersion = other.MinorVersion;
      }
      if (other.BuildVersion.Length != 0) {
        BuildVersion = other.BuildVersion;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Username = input.ReadString();
            break;
          }
          case 18: {
            MajorVersion = input.ReadString();
            break;
          }
          case 26: {
            MinorVersion = input.ReadString();
            break;
          }
          case 34: {
            BuildVersion = input.ReadString();
            break;
          }
          case 42: {
            EncryptedPassword = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginResult : pb::IMessage<LoginResult> {
    private static readonly pb::MessageParser<LoginResult> _parser = new pb::MessageParser<LoginResult>(() => new LoginResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChessCom.ChesscomReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResult(LoginResult other) : this() {
      successfullLogin_ = other.successfullLogin_;
      loginMessage_ = other.loginMessage_;
      UserData = other.userData_ != null ? other.UserData.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResult Clone() {
      return new LoginResult(this);
    }

    /// <summary>Field number for the "successfull_login" field.</summary>
    public const int SuccessfullLoginFieldNumber = 1;
    private bool successfullLogin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SuccessfullLogin {
      get { return successfullLogin_; }
      set {
        successfullLogin_ = value;
      }
    }

    /// <summary>Field number for the "login_message" field.</summary>
    public const int LoginMessageFieldNumber = 4;
    private string loginMessage_ = "";
    /// <summary>
    ///bool versionCorrect = 3;
    ///string userToken = 2;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LoginMessage {
      get { return loginMessage_; }
      set {
        loginMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_data" field.</summary>
    public const int UserDataFieldNumber = 5;
    private global::ChessCom.UserData userData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ChessCom.UserData UserData {
      get { return userData_; }
      set {
        userData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SuccessfullLogin != other.SuccessfullLogin) return false;
      if (LoginMessage != other.LoginMessage) return false;
      if (!object.Equals(UserData, other.UserData)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SuccessfullLogin != false) hash ^= SuccessfullLogin.GetHashCode();
      if (LoginMessage.Length != 0) hash ^= LoginMessage.GetHashCode();
      if (userData_ != null) hash ^= UserData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SuccessfullLogin != false) {
        output.WriteRawTag(8);
        output.WriteBool(SuccessfullLogin);
      }
      if (LoginMessage.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(LoginMessage);
      }
      if (userData_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(UserData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SuccessfullLogin != false) {
        size += 1 + 1;
      }
      if (LoginMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LoginMessage);
      }
      if (userData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginResult other) {
      if (other == null) {
        return;
      }
      if (other.SuccessfullLogin != false) {
        SuccessfullLogin = other.SuccessfullLogin;
      }
      if (other.LoginMessage.Length != 0) {
        LoginMessage = other.LoginMessage;
      }
      if (other.userData_ != null) {
        if (userData_ == null) {
          userData_ = new global::ChessCom.UserData();
        }
        UserData.MergeFrom(other.UserData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SuccessfullLogin = input.ReadBool();
            break;
          }
          case 34: {
            LoginMessage = input.ReadString();
            break;
          }
          case 42: {
            if (userData_ == null) {
              userData_ = new global::ChessCom.UserData();
            }
            input.ReadMessage(userData_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserIdentity : pb::IMessage<UserIdentity> {
    private static readonly pb::MessageParser<UserIdentity> _parser = new pb::MessageParser<UserIdentity>(() => new UserIdentity());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserIdentity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChessCom.ChesscomReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserIdentity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserIdentity(UserIdentity other) : this() {
      usertoken_ = other.usertoken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserIdentity Clone() {
      return new UserIdentity(this);
    }

    /// <summary>Field number for the "usertoken" field.</summary>
    public const int UsertokenFieldNumber = 1;
    private string usertoken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Usertoken {
      get { return usertoken_; }
      set {
        usertoken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserIdentity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserIdentity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Usertoken != other.Usertoken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Usertoken.Length != 0) hash ^= Usertoken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Usertoken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Usertoken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Usertoken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Usertoken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserIdentity other) {
      if (other == null) {
        return;
      }
      if (other.Usertoken.Length != 0) {
        Usertoken = other.Usertoken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Usertoken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserData : pb::IMessage<UserData> {
    private static readonly pb::MessageParser<UserData> _parser = new pb::MessageParser<UserData>(() => new UserData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChessCom.ChesscomReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserData(UserData other) : this() {
      username_ = other.username_;
      usertoken_ = other.usertoken_;
      elo_ = other.elo_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserData Clone() {
      return new UserData(this);
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 1;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "usertoken" field.</summary>
    public const int UsertokenFieldNumber = 2;
    private string usertoken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Usertoken {
      get { return usertoken_; }
      set {
        usertoken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "elo" field.</summary>
    public const int EloFieldNumber = 3;
    private int elo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Elo {
      get { return elo_; }
      set {
        elo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Username != other.Username) return false;
      if (Usertoken != other.Usertoken) return false;
      if (Elo != other.Elo) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Usertoken.Length != 0) hash ^= Usertoken.GetHashCode();
      if (Elo != 0) hash ^= Elo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Username.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Username);
      }
      if (Usertoken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Usertoken);
      }
      if (Elo != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Elo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Usertoken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Usertoken);
      }
      if (Elo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Elo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserData other) {
      if (other == null) {
        return;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Usertoken.Length != 0) {
        Usertoken = other.Usertoken;
      }
      if (other.Elo != 0) {
        Elo = other.Elo;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Username = input.ReadString();
            break;
          }
          case 18: {
            Usertoken = input.ReadString();
            break;
          }
          case 24: {
            Elo = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LookForMatchResult : pb::IMessage<LookForMatchResult> {
    private static readonly pb::MessageParser<LookForMatchResult> _parser = new pb::MessageParser<LookForMatchResult>(() => new LookForMatchResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LookForMatchResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChessCom.ChesscomReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LookForMatchResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LookForMatchResult(LookForMatchResult other) : this() {
      succes_ = other.succes_;
      matchToken_ = other.matchToken_;
      isWhitePlayer_ = other.isWhitePlayer_;
      GameRules = other.gameRules_ != null ? other.GameRules.Clone() : null;
      OpponentUserdata = other.opponentUserdata_ != null ? other.OpponentUserdata.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LookForMatchResult Clone() {
      return new LookForMatchResult(this);
    }

    /// <summary>Field number for the "succes" field.</summary>
    public const int SuccesFieldNumber = 1;
    private bool succes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Succes {
      get { return succes_; }
      set {
        succes_ = value;
      }
    }

    /// <summary>Field number for the "match_token" field.</summary>
    public const int MatchTokenFieldNumber = 2;
    private string matchToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MatchToken {
      get { return matchToken_; }
      set {
        matchToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_white_player" field.</summary>
    public const int IsWhitePlayerFieldNumber = 3;
    private bool isWhitePlayer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsWhitePlayer {
      get { return isWhitePlayer_; }
      set {
        isWhitePlayer_ = value;
      }
    }

    /// <summary>Field number for the "gameRules" field.</summary>
    public const int GameRulesFieldNumber = 7;
    private global::ChessCom.GameRules gameRules_;
    /// <summary>
    ///VisionRules rules = 4;    //TODO deprocate
    ///string opponentUsername = 5;
    ///TimeRules timerules = 6;  //TODO deprocate
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ChessCom.GameRules GameRules {
      get { return gameRules_; }
      set {
        gameRules_ = value;
      }
    }

    /// <summary>Field number for the "opponent_userdata" field.</summary>
    public const int OpponentUserdataFieldNumber = 8;
    private global::ChessCom.UserData opponentUserdata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ChessCom.UserData OpponentUserdata {
      get { return opponentUserdata_; }
      set {
        opponentUserdata_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LookForMatchResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LookForMatchResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Succes != other.Succes) return false;
      if (MatchToken != other.MatchToken) return false;
      if (IsWhitePlayer != other.IsWhitePlayer) return false;
      if (!object.Equals(GameRules, other.GameRules)) return false;
      if (!object.Equals(OpponentUserdata, other.OpponentUserdata)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Succes != false) hash ^= Succes.GetHashCode();
      if (MatchToken.Length != 0) hash ^= MatchToken.GetHashCode();
      if (IsWhitePlayer != false) hash ^= IsWhitePlayer.GetHashCode();
      if (gameRules_ != null) hash ^= GameRules.GetHashCode();
      if (opponentUserdata_ != null) hash ^= OpponentUserdata.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Succes != false) {
        output.WriteRawTag(8);
        output.WriteBool(Succes);
      }
      if (MatchToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MatchToken);
      }
      if (IsWhitePlayer != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsWhitePlayer);
      }
      if (gameRules_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(GameRules);
      }
      if (opponentUserdata_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(OpponentUserdata);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Succes != false) {
        size += 1 + 1;
      }
      if (MatchToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchToken);
      }
      if (IsWhitePlayer != false) {
        size += 1 + 1;
      }
      if (gameRules_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameRules);
      }
      if (opponentUserdata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OpponentUserdata);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LookForMatchResult other) {
      if (other == null) {
        return;
      }
      if (other.Succes != false) {
        Succes = other.Succes;
      }
      if (other.MatchToken.Length != 0) {
        MatchToken = other.MatchToken;
      }
      if (other.IsWhitePlayer != false) {
        IsWhitePlayer = other.IsWhitePlayer;
      }
      if (other.gameRules_ != null) {
        if (gameRules_ == null) {
          gameRules_ = new global::ChessCom.GameRules();
        }
        GameRules.MergeFrom(other.GameRules);
      }
      if (other.opponentUserdata_ != null) {
        if (opponentUserdata_ == null) {
          opponentUserdata_ = new global::ChessCom.UserData();
        }
        OpponentUserdata.MergeFrom(other.OpponentUserdata);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Succes = input.ReadBool();
            break;
          }
          case 18: {
            MatchToken = input.ReadString();
            break;
          }
          case 24: {
            IsWhitePlayer = input.ReadBool();
            break;
          }
          case 58: {
            if (gameRules_ == null) {
              gameRules_ = new global::ChessCom.GameRules();
            }
            input.ReadMessage(gameRules_);
            break;
          }
          case 66: {
            if (opponentUserdata_ == null) {
              opponentUserdata_ = new global::ChessCom.UserData();
            }
            input.ReadMessage(opponentUserdata_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MovePacket : pb::IMessage<MovePacket> {
    private static readonly pb::MessageParser<MovePacket> _parser = new pb::MessageParser<MovePacket>(() => new MovePacket());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MovePacket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChessCom.ChesscomReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MovePacket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MovePacket(MovePacket other) : this() {
      doingMove_ = other.doingMove_;
      Move = other.move_ != null ? other.Move.Clone() : null;
      usertoken_ = other.usertoken_;
      askingForDraw_ = other.askingForDraw_;
      cheatMatchevent_ = other.cheatMatchevent_;
      matchToken_ = other.matchToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MovePacket Clone() {
      return new MovePacket(this);
    }

    /// <summary>Field number for the "doing_move" field.</summary>
    public const int DoingMoveFieldNumber = 1;
    private bool doingMove_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DoingMove {
      get { return doingMove_; }
      set {
        doingMove_ = value;
      }
    }

    /// <summary>Field number for the "move" field.</summary>
    public const int MoveFieldNumber = 2;
    private global::ChessCom.Move move_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ChessCom.Move Move {
      get { return move_; }
      set {
        move_ = value;
      }
    }

    /// <summary>Field number for the "usertoken" field.</summary>
    public const int UsertokenFieldNumber = 3;
    private string usertoken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Usertoken {
      get { return usertoken_; }
      set {
        usertoken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "asking_for_draw" field.</summary>
    public const int AskingForDrawFieldNumber = 4;
    private bool askingForDraw_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AskingForDraw {
      get { return askingForDraw_; }
      set {
        askingForDraw_ = value;
      }
    }

    /// <summary>Field number for the "cheat_matchevent" field.</summary>
    public const int CheatMatcheventFieldNumber = 5;
    private global::ChessCom.MatchEvent cheatMatchevent_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ChessCom.MatchEvent CheatMatchevent {
      get { return cheatMatchevent_; }
      set {
        cheatMatchevent_ = value;
      }
    }

    /// <summary>Field number for the "match_token" field.</summary>
    public const int MatchTokenFieldNumber = 6;
    private string matchToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MatchToken {
      get { return matchToken_; }
      set {
        matchToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MovePacket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MovePacket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DoingMove != other.DoingMove) return false;
      if (!object.Equals(Move, other.Move)) return false;
      if (Usertoken != other.Usertoken) return false;
      if (AskingForDraw != other.AskingForDraw) return false;
      if (CheatMatchevent != other.CheatMatchevent) return false;
      if (MatchToken != other.MatchToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DoingMove != false) hash ^= DoingMove.GetHashCode();
      if (move_ != null) hash ^= Move.GetHashCode();
      if (Usertoken.Length != 0) hash ^= Usertoken.GetHashCode();
      if (AskingForDraw != false) hash ^= AskingForDraw.GetHashCode();
      if (CheatMatchevent != 0) hash ^= CheatMatchevent.GetHashCode();
      if (MatchToken.Length != 0) hash ^= MatchToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DoingMove != false) {
        output.WriteRawTag(8);
        output.WriteBool(DoingMove);
      }
      if (move_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Move);
      }
      if (Usertoken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Usertoken);
      }
      if (AskingForDraw != false) {
        output.WriteRawTag(32);
        output.WriteBool(AskingForDraw);
      }
      if (CheatMatchevent != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) CheatMatchevent);
      }
      if (MatchToken.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(MatchToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DoingMove != false) {
        size += 1 + 1;
      }
      if (move_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Move);
      }
      if (Usertoken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Usertoken);
      }
      if (AskingForDraw != false) {
        size += 1 + 1;
      }
      if (CheatMatchevent != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CheatMatchevent);
      }
      if (MatchToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MovePacket other) {
      if (other == null) {
        return;
      }
      if (other.DoingMove != false) {
        DoingMove = other.DoingMove;
      }
      if (other.move_ != null) {
        if (move_ == null) {
          move_ = new global::ChessCom.Move();
        }
        Move.MergeFrom(other.Move);
      }
      if (other.Usertoken.Length != 0) {
        Usertoken = other.Usertoken;
      }
      if (other.AskingForDraw != false) {
        AskingForDraw = other.AskingForDraw;
      }
      if (other.CheatMatchevent != 0) {
        CheatMatchevent = other.CheatMatchevent;
      }
      if (other.MatchToken.Length != 0) {
        MatchToken = other.MatchToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DoingMove = input.ReadBool();
            break;
          }
          case 18: {
            if (move_ == null) {
              move_ = new global::ChessCom.Move();
            }
            input.ReadMessage(move_);
            break;
          }
          case 26: {
            Usertoken = input.ReadString();
            break;
          }
          case 32: {
            AskingForDraw = input.ReadBool();
            break;
          }
          case 40: {
            cheatMatchevent_ = (global::ChessCom.MatchEvent) input.ReadEnum();
            break;
          }
          case 50: {
            MatchToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MoveResult : pb::IMessage<MoveResult> {
    private static readonly pb::MessageParser<MoveResult> _parser = new pb::MessageParser<MoveResult>(() => new MoveResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoveResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChessCom.ChesscomReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveResult(MoveResult other) : this() {
      moveHappned_ = other.moveHappned_;
      GameState = other.gameState_ != null ? other.GameState.Clone() : null;
      opponentAskingForDraw_ = other.opponentAskingForDraw_;
      matchEvent_ = other.matchEvent_;
      secsLeft_ = other.secsLeft_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveResult Clone() {
      return new MoveResult(this);
    }

    /// <summary>Field number for the "move_happned" field.</summary>
    public const int MoveHappnedFieldNumber = 1;
    private bool moveHappned_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MoveHappned {
      get { return moveHappned_; }
      set {
        moveHappned_ = value;
      }
    }

    /// <summary>Field number for the "game_state" field.</summary>
    public const int GameStateFieldNumber = 2;
    private global::ChessCom.GameState gameState_;
    /// <summary>
    ///Move move = 2;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ChessCom.GameState GameState {
      get { return gameState_; }
      set {
        gameState_ = value;
      }
    }

    /// <summary>Field number for the "opponent_asking_for_draw" field.</summary>
    public const int OpponentAskingForDrawFieldNumber = 4;
    private bool opponentAskingForDraw_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OpponentAskingForDraw {
      get { return opponentAskingForDraw_; }
      set {
        opponentAskingForDraw_ = value;
      }
    }

    /// <summary>Field number for the "match_event" field.</summary>
    public const int MatchEventFieldNumber = 5;
    private global::ChessCom.MatchEvent matchEvent_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ChessCom.MatchEvent MatchEvent {
      get { return matchEvent_; }
      set {
        matchEvent_ = value;
      }
    }

    /// <summary>Field number for the "secs_left" field.</summary>
    public const int SecsLeftFieldNumber = 6;
    private int secsLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SecsLeft {
      get { return secsLeft_; }
      set {
        secsLeft_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoveResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoveResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MoveHappned != other.MoveHappned) return false;
      if (!object.Equals(GameState, other.GameState)) return false;
      if (OpponentAskingForDraw != other.OpponentAskingForDraw) return false;
      if (MatchEvent != other.MatchEvent) return false;
      if (SecsLeft != other.SecsLeft) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MoveHappned != false) hash ^= MoveHappned.GetHashCode();
      if (gameState_ != null) hash ^= GameState.GetHashCode();
      if (OpponentAskingForDraw != false) hash ^= OpponentAskingForDraw.GetHashCode();
      if (MatchEvent != 0) hash ^= MatchEvent.GetHashCode();
      if (SecsLeft != 0) hash ^= SecsLeft.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MoveHappned != false) {
        output.WriteRawTag(8);
        output.WriteBool(MoveHappned);
      }
      if (gameState_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(GameState);
      }
      if (OpponentAskingForDraw != false) {
        output.WriteRawTag(32);
        output.WriteBool(OpponentAskingForDraw);
      }
      if (MatchEvent != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) MatchEvent);
      }
      if (SecsLeft != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(SecsLeft);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MoveHappned != false) {
        size += 1 + 1;
      }
      if (gameState_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameState);
      }
      if (OpponentAskingForDraw != false) {
        size += 1 + 1;
      }
      if (MatchEvent != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MatchEvent);
      }
      if (SecsLeft != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SecsLeft);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoveResult other) {
      if (other == null) {
        return;
      }
      if (other.MoveHappned != false) {
        MoveHappned = other.MoveHappned;
      }
      if (other.gameState_ != null) {
        if (gameState_ == null) {
          gameState_ = new global::ChessCom.GameState();
        }
        GameState.MergeFrom(other.GameState);
      }
      if (other.OpponentAskingForDraw != false) {
        OpponentAskingForDraw = other.OpponentAskingForDraw;
      }
      if (other.MatchEvent != 0) {
        MatchEvent = other.MatchEvent;
      }
      if (other.SecsLeft != 0) {
        SecsLeft = other.SecsLeft;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MoveHappned = input.ReadBool();
            break;
          }
          case 18: {
            if (gameState_ == null) {
              gameState_ = new global::ChessCom.GameState();
            }
            input.ReadMessage(gameState_);
            break;
          }
          case 32: {
            OpponentAskingForDraw = input.ReadBool();
            break;
          }
          case 40: {
            matchEvent_ = (global::ChessCom.MatchEvent) input.ReadEnum();
            break;
          }
          case 48: {
            SecsLeft = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class JoinGameRequest : pb::IMessage<JoinGameRequest> {
    private static readonly pb::MessageParser<JoinGameRequest> _parser = new pb::MessageParser<JoinGameRequest>(() => new JoinGameRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinGameRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChessCom.ChesscomReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinGameRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinGameRequest(JoinGameRequest other) : this() {
      id_ = other.id_;
      Joiner = other.joiner_ != null ? other.Joiner.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinGameRequest Clone() {
      return new JoinGameRequest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "joiner" field.</summary>
    public const int JoinerFieldNumber = 2;
    private global::ChessCom.UserData joiner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ChessCom.UserData Joiner {
      get { return joiner_; }
      set {
        joiner_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinGameRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinGameRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Joiner, other.Joiner)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (joiner_ != null) hash ^= Joiner.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (joiner_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Joiner);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (joiner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Joiner);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinGameRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.joiner_ != null) {
        if (joiner_ == null) {
          joiner_ = new global::ChessCom.UserData();
        }
        Joiner.MergeFrom(other.Joiner);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            if (joiner_ == null) {
              joiner_ = new global::ChessCom.UserData();
            }
            input.ReadMessage(joiner_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChatMessage : pb::IMessage<ChatMessage> {
    private static readonly pb::MessageParser<ChatMessage> _parser = new pb::MessageParser<ChatMessage>(() => new ChatMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChatMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChessCom.ChesscomReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatMessage(ChatMessage other) : this() {
      senderUsertoken_ = other.senderUsertoken_;
      senderUsername_ = other.senderUsername_;
      reciverUsertoken_ = other.reciverUsertoken_;
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatMessage Clone() {
      return new ChatMessage(this);
    }

    /// <summary>Field number for the "sender_usertoken" field.</summary>
    public const int SenderUsertokenFieldNumber = 1;
    private string senderUsertoken_ = "";
    /// <summary>
    ///for validation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SenderUsertoken {
      get { return senderUsertoken_; }
      set {
        senderUsertoken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sender_username" field.</summary>
    public const int SenderUsernameFieldNumber = 2;
    private string senderUsername_ = "";
    /// <summary>
    ///sender username
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SenderUsername {
      get { return senderUsername_; }
      set {
        senderUsername_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reciver_usertoken" field.</summary>
    public const int ReciverUsertokenFieldNumber = 3;
    private string reciverUsertoken_ = "";
    /// <summary>
    ///reciver userToken
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReciverUsertoken {
      get { return reciverUsertoken_; }
      set {
        reciverUsertoken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 4;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChatMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChatMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SenderUsertoken != other.SenderUsertoken) return false;
      if (SenderUsername != other.SenderUsername) return false;
      if (ReciverUsertoken != other.ReciverUsertoken) return false;
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SenderUsertoken.Length != 0) hash ^= SenderUsertoken.GetHashCode();
      if (SenderUsername.Length != 0) hash ^= SenderUsername.GetHashCode();
      if (ReciverUsertoken.Length != 0) hash ^= ReciverUsertoken.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SenderUsertoken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SenderUsertoken);
      }
      if (SenderUsername.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SenderUsername);
      }
      if (ReciverUsertoken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ReciverUsertoken);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SenderUsertoken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SenderUsertoken);
      }
      if (SenderUsername.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SenderUsername);
      }
      if (ReciverUsertoken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReciverUsertoken);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChatMessage other) {
      if (other == null) {
        return;
      }
      if (other.SenderUsertoken.Length != 0) {
        SenderUsertoken = other.SenderUsertoken;
      }
      if (other.SenderUsername.Length != 0) {
        SenderUsername = other.SenderUsername;
      }
      if (other.ReciverUsertoken.Length != 0) {
        ReciverUsertoken = other.ReciverUsertoken;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SenderUsertoken = input.ReadString();
            break;
          }
          case 18: {
            SenderUsername = input.ReadString();
            break;
          }
          case 26: {
            ReciverUsertoken = input.ReadString();
            break;
          }
          case 34: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
