syntax = "proto3";

option csharp_namespace = "ChessCom";

package chesscom;

// Defines the service
service ChessCom {
    // Function invoked to send the request
    rpc sendRequest (MathRequest) returns (MathReply) {}
	rpc Login(LoginForm) returns (LoginResult) {}
	rpc LookForMatch(UserIdentity) returns (LookForMatchResult) {}
	rpc Match(stream MovePacket) returns (stream MoveResult) {}
}

enum MatchEvent {
	Non = 0;
	WhiteWin = 1;
	BlackWin = 2;
	Draw = 3;
	UnexpectedClosing = 4;
	WhiteAskingForDraw = 5;
	BlackAskingForDraw = 6;
	//AcceptingDraw = 6;
}

enum Pices {
	None = 0;
	BlackPawn = 1;
	BlackKnight = 2;
	BlackBishop = 3;
	BlackRook = 4;
	BlackQueen = 5;
	BlackKing = 6;
	WhitePawn = 7;
	WhiteKnight = 8;
	WhiteBishop = 9;
	WhiteRook = 10;
	WhiteQueen = 11;
	WhiteKing = 12;
}

message VisionRules {
	bool enabled = 1;
	bool viewMoveFields = 2;
	int32 viewRange = 3;
	map<int32, VisionRules> piceOverwriter = 4; //Must be a Pices value
}

message Move {
	string from = 2;
	string to = 3;
}

message LoginForm {
	string username = 1;
}

message LoginResult {
	bool successfullLogin = 1;
	string userToken = 2;
}

message UserIdentity {
	string userToken = 1;
}

message LookForMatchResult {
	bool succes = 1;
	string matchToken = 2;
	bool isWhitePlayer = 3;
	VisionRules rules = 4;
}

message MovePacket{
	bool doingMove = 1;
	Move move = 2;
	string userToken = 3;
	bool askingForDraw = 4;
	MatchEvent cheatMatchEvent = 5;
	string matchToken = 6;
}
message MoveResult{
	bool moveHappned = 1;
	Move move = 2;
	bool opponentAskingForDraw = 4;
	MatchEvent matchEvent = 5;
}

// The request message containing requested numbers
message MathRequest {
    int32 a = 1;
    int32 b = 2;
}

// The response message containing response
message MathReply {
    int32 result = 1;
}
