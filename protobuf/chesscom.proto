syntax = "proto3";

import "google/protobuf/timestamp.proto";

option csharp_namespace = "ChessCom";

package chesscom;

// Defines the service
service ChessCom {
    // Function invoked to send the request
	rpc Login(LoginForm) returns (LoginResult) {}
	rpc LookForMatch(UserIdentification) returns (LookForMatchResult) {}
	rpc Match(stream MovePacket) returns (stream MoveResult) {}
	rpc ChatMessageStream(stream ChatMessage) returns (stream ChatMessage) {}
	rpc HostGame(HostedGame) returns (LookForMatchResult) {}
	rpc AvailableGames(Void) returns (HostedGamesMap) {} //TODO need another metod when list becomes to long
	rpc JoinGame(JoinGameRequest) returns (LookForMatchResult) {}

	rpc Alive(Heartbeat) returns (Heartbeat) {} //This exist to make sure both client and server still exists and is working.
												//If server has not recived an Alive Heartbeat from a logged in user in
												//2 minutes the user will be force logged out. Clients are recomendet to send
												//Alive Heartbeat every 1 minute
	rpc MatchEventListener(MatchObserver) returns (stream MoveResult) {}
	rpc SendMove(MovePacket) returns (Void) {}
	rpc ChatMessageListener(UserData) returns (stream ChatMessage) {}
	rpc SendChatMessage(ChatMessage) returns (Void) {}
	rpc ProcessReplay(ReplayRequest) returns (Replay) {}
}

message Void{}

enum MatchEvent {
	Non = 0;
	WhiteWin = 1;
	BlackWin = 2;
	Draw = 3;
	UnexpectedClosing = 4;
	AskingForDraw = 5;
	AcceptingDraw = 6;
	ExpectedClosing = 7;
	//AcceptingDraw = 6;
}

enum Pices {
	None = 0;
	BlackPawn = 1;
	BlackKnight = 2;
	BlackBishop = 3;
	BlackRook = 4;
	BlackQueen = 5;
	BlackKing = 6;
	WhitePawn = 7;
	WhiteKnight = 8;
	WhiteBishop = 9;
	WhiteRook = 10;
	WhiteQueen = 11;
	WhiteKing = 12;
}

enum ChessType
{
	Classic = 0;
	FisherRandom = 1;
	SlugRandom = 2;
}

enum SideType
{
	HostIsWhite = 0;
	HostIsBlack = 1;
	Random = 2;
}

message Heartbeat
{
	bool alive = 1;
	string usertoken = 2;
}

message MatchObserver
{
	string match_id = 1;
	string usertoken = 2;
}

message VisionRules {
	bool enabled = 1;
	bool view_move_fields = 2;
	int32 view_range = 3;
	map<int32, VisionRules> pice_overwriter = 4; //Must be a Pices value
	bool view_capture_field = 5;
}

message TimeRules {
	Time player_time = 2;
	int32 seconds_per_move = 3;
}

message GameRules
{
	VisionRules vision_rules = 1;
	TimeRules time_rules = 2;
	ChessType chess_type = 3;
	SideType side_type = 4;
}

message HostedGame 
{
	GameRules game_rules = 1;
    //string hostUsertoken = 2;
    //string joinerUsertoken = 3;
	int32 id = 4;
	//string hostUsername = 5;
	//string joinerUsername = 6;
	//int32 hostElo = 7;
	UserData host = 8;
	UserData joiner = 9;
}

message HostedGamesMap
{
	map<int32, HostedGame> hosted_games = 1;
}

message HostedGameResult
{
	bool found_opponent = 1;

}

message Time {
	int32 minutes = 1;
	int32 seconds = 2;
}

message FieldMoves{
	repeated string list = 1;
}

message Move {
	string from = 2;
	string to = 3;
	google.protobuf.Timestamp timestamp = 4;
	int32 sec_spent = 5;
}

message GameState{
	string from = 2;
	string to = 3;
	google.protobuf.Timestamp timestamp = 4;
	repeated bool player_vision = 7; //Depricated
	repeated Pices pices = 8; 
	map<string, FieldMoves> player_moves = 9;
	map<string, FieldMoves> shadow_moves = 11;
	repeated PiceCapture captured_pices = 10;
	repeated string check = 16;
	bool current_turn_is_white = 17;
    VisionState vision_state = 18;
}

message VisionState { 
	repeated bool white_vision = 1; //no values means data not available.
	repeated bool black_vision = 2; //no values means data not available.
//	repeated bool observer_vision = 3;
}

message GameResult {
	string pgn = 1;
}

message LoginForm {
	string username = 1;
	string encrypted_password = 5;
	string major_version = 2;
	string minor_version = 3;
	string build_version = 4;
}

message LoginResult {
	bool successfull_login = 1;
	//bool versionCorrect = 3;
	//string userToken = 2;
	string login_message = 4;
	UserData user_data = 5;
}

message UserIdentification {
	string usertoken = 1;
	string secret = 2;
}

message UserData {
	string username = 1;
	string usertoken = 2;
	int32 elo = 3;
}

message LookForMatchResult {
	bool succes = 1;
	string match_token = 2;
	bool is_white_player = 3;
	GameRules game_rules = 7;  // this hold both
	UserData opponent_user_data = 8;
}

message MovePacket{
	bool doing_move = 1;
	Move move = 2;
	string usertoken = 3;
	bool asking_for_draw = 4;
	MatchEvent cheat_matchevent = 5;
	string match_token = 6;
}
message MoveResult {
	bool move_happned = 1;
	//Move move = 2;
	GameState game_state = 2;
	//bool opponent_asking_for_draw = 4;
	MatchEvent match_event = 5;
	ChessClock chess_clock = 7;
	GameResult game_result = 8;
}

message ReplayRequest
{
	UserIdentification user_ident = 1;
	string pgn = 2;
}

message Replay
{
	bool valid = 6; //true if replay is valid
    string white = 4;
    string black = 5;
	MatchEvent match_event = 1;  
	ChessClock chess_clock = 2;
    repeated GameState game_states = 3;
}

message JoinGameRequest 
{
	int32 id = 1;
	UserData joiner = 2;
}

message ChatMessage {
	//for validation
	string sender_usertoken = 1; 
	
	string sender_username = 2; //sender username
	string reciver_usertoken = 3; //reciver userToken
	string message = 4;
}

message ChessClock {
	int32 white_seconds_left = 1;
	int32 black_seconds_left = 2;
	bool timer_ticking = 3;
}

message PiceCapture {
	string location = 1;
	Pices pice = 2;
}
