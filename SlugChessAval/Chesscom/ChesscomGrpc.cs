// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chesscom.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace ChessCom {
  /// <summary>
  /// Defines the service
  /// </summary>
  public static partial class ChessCom
  {
    static readonly string __ServiceName = "chesscom.ChessCom";

    static readonly grpc::Marshaller<global::ChessCom.LoginForm> __Marshaller_LoginForm = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ChessCom.LoginForm.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ChessCom.LoginResult> __Marshaller_LoginResult = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ChessCom.LoginResult.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ChessCom.UserIdentity> __Marshaller_UserIdentity = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ChessCom.UserIdentity.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ChessCom.LookForMatchResult> __Marshaller_LookForMatchResult = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ChessCom.LookForMatchResult.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ChessCom.MovePacket> __Marshaller_MovePacket = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ChessCom.MovePacket.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ChessCom.MoveResult> __Marshaller_MoveResult = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ChessCom.MoveResult.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ChessCom.ChatMessage> __Marshaller_ChatMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ChessCom.ChatMessage.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ChessCom.HostedGame> __Marshaller_HostedGame = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ChessCom.HostedGame.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ChessCom.Void> __Marshaller_Void = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ChessCom.Void.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ChessCom.HostedGamesMap> __Marshaller_HostedGamesMap = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ChessCom.HostedGamesMap.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ChessCom.JoinGameRequest> __Marshaller_JoinGameRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ChessCom.JoinGameRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ChessCom.Heartbeat> __Marshaller_Heartbeat = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ChessCom.Heartbeat.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ChessCom.MatchId> __Marshaller_MatchId = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ChessCom.MatchId.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ChessCom.UserData> __Marshaller_UserData = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ChessCom.UserData.Parser.ParseFrom);

    static readonly grpc::Method<global::ChessCom.LoginForm, global::ChessCom.LoginResult> __Method_Login = new grpc::Method<global::ChessCom.LoginForm, global::ChessCom.LoginResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Login",
        __Marshaller_LoginForm,
        __Marshaller_LoginResult);

    static readonly grpc::Method<global::ChessCom.UserIdentity, global::ChessCom.LookForMatchResult> __Method_LookForMatch = new grpc::Method<global::ChessCom.UserIdentity, global::ChessCom.LookForMatchResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "LookForMatch",
        __Marshaller_UserIdentity,
        __Marshaller_LookForMatchResult);

    static readonly grpc::Method<global::ChessCom.MovePacket, global::ChessCom.MoveResult> __Method_Match = new grpc::Method<global::ChessCom.MovePacket, global::ChessCom.MoveResult>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "Match",
        __Marshaller_MovePacket,
        __Marshaller_MoveResult);

    static readonly grpc::Method<global::ChessCom.ChatMessage, global::ChessCom.ChatMessage> __Method_ChatMessageStream = new grpc::Method<global::ChessCom.ChatMessage, global::ChessCom.ChatMessage>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "ChatMessageStream",
        __Marshaller_ChatMessage,
        __Marshaller_ChatMessage);

    static readonly grpc::Method<global::ChessCom.HostedGame, global::ChessCom.LookForMatchResult> __Method_HostGame = new grpc::Method<global::ChessCom.HostedGame, global::ChessCom.LookForMatchResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "HostGame",
        __Marshaller_HostedGame,
        __Marshaller_LookForMatchResult);

    static readonly grpc::Method<global::ChessCom.Void, global::ChessCom.HostedGamesMap> __Method_AvailableGames = new grpc::Method<global::ChessCom.Void, global::ChessCom.HostedGamesMap>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AvailableGames",
        __Marshaller_Void,
        __Marshaller_HostedGamesMap);

    static readonly grpc::Method<global::ChessCom.JoinGameRequest, global::ChessCom.LookForMatchResult> __Method_JoinGame = new grpc::Method<global::ChessCom.JoinGameRequest, global::ChessCom.LookForMatchResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "JoinGame",
        __Marshaller_JoinGameRequest,
        __Marshaller_LookForMatchResult);

    static readonly grpc::Method<global::ChessCom.Heartbeat, global::ChessCom.Heartbeat> __Method_Alive = new grpc::Method<global::ChessCom.Heartbeat, global::ChessCom.Heartbeat>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Alive",
        __Marshaller_Heartbeat,
        __Marshaller_Heartbeat);

    static readonly grpc::Method<global::ChessCom.MatchId, global::ChessCom.MovePacket> __Method_MatchEventListener = new grpc::Method<global::ChessCom.MatchId, global::ChessCom.MovePacket>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "MatchEventListener",
        __Marshaller_MatchId,
        __Marshaller_MovePacket);

    static readonly grpc::Method<global::ChessCom.MovePacket, global::ChessCom.Void> __Method_SendMove = new grpc::Method<global::ChessCom.MovePacket, global::ChessCom.Void>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SendMove",
        __Marshaller_MovePacket,
        __Marshaller_Void);

    static readonly grpc::Method<global::ChessCom.UserData, global::ChessCom.ChatMessage> __Method_ChatMessageListenter = new grpc::Method<global::ChessCom.UserData, global::ChessCom.ChatMessage>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "ChatMessageListenter",
        __Marshaller_UserData,
        __Marshaller_ChatMessage);

    static readonly grpc::Method<global::ChessCom.ChatMessage, global::ChessCom.Void> __Method_SendChatMessage = new grpc::Method<global::ChessCom.ChatMessage, global::ChessCom.Void>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SendChatMessage",
        __Marshaller_ChatMessage,
        __Marshaller_Void);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::ChessCom.ChesscomReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ChessCom</summary>
    public abstract partial class ChessComBase
    {
      /// <summary>
      /// Function invoked to send the request
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::ChessCom.LoginResult> Login(global::ChessCom.LoginForm request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ChessCom.LookForMatchResult> LookForMatch(global::ChessCom.UserIdentity request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task Match(grpc::IAsyncStreamReader<global::ChessCom.MovePacket> requestStream, grpc::IServerStreamWriter<global::ChessCom.MoveResult> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task ChatMessageStream(grpc::IAsyncStreamReader<global::ChessCom.ChatMessage> requestStream, grpc::IServerStreamWriter<global::ChessCom.ChatMessage> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ChessCom.LookForMatchResult> HostGame(global::ChessCom.HostedGame request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ChessCom.HostedGamesMap> AvailableGames(global::ChessCom.Void request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ChessCom.LookForMatchResult> JoinGame(global::ChessCom.JoinGameRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ChessCom.Heartbeat> Alive(global::ChessCom.Heartbeat request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///If server has not recived an Alive Heartbeat from a logged in user in
      ///2 minutes the user will be force logged out. Clients are recomendet to send
      ///Alive Heartbeat every 1 minute
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task MatchEventListener(global::ChessCom.MatchId request, grpc::IServerStreamWriter<global::ChessCom.MovePacket> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ChessCom.Void> SendMove(global::ChessCom.MovePacket request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task ChatMessageListenter(global::ChessCom.UserData request, grpc::IServerStreamWriter<global::ChessCom.ChatMessage> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ChessCom.Void> SendChatMessage(global::ChessCom.ChatMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ChessCom</summary>
    public partial class ChessComClient : grpc::ClientBase<ChessComClient>
    {
      /// <summary>Creates a new client for ChessCom</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ChessComClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ChessCom that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ChessComClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ChessComClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ChessComClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Function invoked to send the request
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::ChessCom.LoginResult Login(global::ChessCom.LoginForm request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Login(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Function invoked to send the request
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::ChessCom.LoginResult Login(global::ChessCom.LoginForm request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Login, null, options, request);
      }
      /// <summary>
      /// Function invoked to send the request
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::ChessCom.LoginResult> LoginAsync(global::ChessCom.LoginForm request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return LoginAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Function invoked to send the request
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::ChessCom.LoginResult> LoginAsync(global::ChessCom.LoginForm request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Login, null, options, request);
      }
      public virtual global::ChessCom.LookForMatchResult LookForMatch(global::ChessCom.UserIdentity request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return LookForMatch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ChessCom.LookForMatchResult LookForMatch(global::ChessCom.UserIdentity request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LookForMatch, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ChessCom.LookForMatchResult> LookForMatchAsync(global::ChessCom.UserIdentity request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return LookForMatchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ChessCom.LookForMatchResult> LookForMatchAsync(global::ChessCom.UserIdentity request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LookForMatch, null, options, request);
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::ChessCom.MovePacket, global::ChessCom.MoveResult> Match(grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Match(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::ChessCom.MovePacket, global::ChessCom.MoveResult> Match(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_Match, null, options);
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::ChessCom.ChatMessage, global::ChessCom.ChatMessage> ChatMessageStream(grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ChatMessageStream(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::ChessCom.ChatMessage, global::ChessCom.ChatMessage> ChatMessageStream(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_ChatMessageStream, null, options);
      }
      public virtual global::ChessCom.LookForMatchResult HostGame(global::ChessCom.HostedGame request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return HostGame(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ChessCom.LookForMatchResult HostGame(global::ChessCom.HostedGame request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_HostGame, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ChessCom.LookForMatchResult> HostGameAsync(global::ChessCom.HostedGame request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return HostGameAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ChessCom.LookForMatchResult> HostGameAsync(global::ChessCom.HostedGame request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_HostGame, null, options, request);
      }
      public virtual global::ChessCom.HostedGamesMap AvailableGames(global::ChessCom.Void request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AvailableGames(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ChessCom.HostedGamesMap AvailableGames(global::ChessCom.Void request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AvailableGames, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ChessCom.HostedGamesMap> AvailableGamesAsync(global::ChessCom.Void request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AvailableGamesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ChessCom.HostedGamesMap> AvailableGamesAsync(global::ChessCom.Void request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AvailableGames, null, options, request);
      }
      public virtual global::ChessCom.LookForMatchResult JoinGame(global::ChessCom.JoinGameRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return JoinGame(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ChessCom.LookForMatchResult JoinGame(global::ChessCom.JoinGameRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_JoinGame, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ChessCom.LookForMatchResult> JoinGameAsync(global::ChessCom.JoinGameRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return JoinGameAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ChessCom.LookForMatchResult> JoinGameAsync(global::ChessCom.JoinGameRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_JoinGame, null, options, request);
      }
      public virtual global::ChessCom.Heartbeat Alive(global::ChessCom.Heartbeat request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Alive(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ChessCom.Heartbeat Alive(global::ChessCom.Heartbeat request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Alive, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ChessCom.Heartbeat> AliveAsync(global::ChessCom.Heartbeat request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AliveAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ChessCom.Heartbeat> AliveAsync(global::ChessCom.Heartbeat request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Alive, null, options, request);
      }
      /// <summary>
      ///If server has not recived an Alive Heartbeat from a logged in user in
      ///2 minutes the user will be force logged out. Clients are recomendet to send
      ///Alive Heartbeat every 1 minute
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::ChessCom.MovePacket> MatchEventListener(global::ChessCom.MatchId request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return MatchEventListener(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///If server has not recived an Alive Heartbeat from a logged in user in
      ///2 minutes the user will be force logged out. Clients are recomendet to send
      ///Alive Heartbeat every 1 minute
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::ChessCom.MovePacket> MatchEventListener(global::ChessCom.MatchId request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_MatchEventListener, null, options, request);
      }
      public virtual global::ChessCom.Void SendMove(global::ChessCom.MovePacket request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SendMove(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ChessCom.Void SendMove(global::ChessCom.MovePacket request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendMove, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ChessCom.Void> SendMoveAsync(global::ChessCom.MovePacket request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SendMoveAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ChessCom.Void> SendMoveAsync(global::ChessCom.MovePacket request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendMove, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::ChessCom.ChatMessage> ChatMessageListenter(global::ChessCom.UserData request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ChatMessageListenter(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::ChessCom.ChatMessage> ChatMessageListenter(global::ChessCom.UserData request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_ChatMessageListenter, null, options, request);
      }
      public virtual global::ChessCom.Void SendChatMessage(global::ChessCom.ChatMessage request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SendChatMessage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ChessCom.Void SendChatMessage(global::ChessCom.ChatMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendChatMessage, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ChessCom.Void> SendChatMessageAsync(global::ChessCom.ChatMessage request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SendChatMessageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ChessCom.Void> SendChatMessageAsync(global::ChessCom.ChatMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendChatMessage, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ChessComClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ChessComClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ChessComBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Login, serviceImpl.Login)
          .AddMethod(__Method_LookForMatch, serviceImpl.LookForMatch)
          .AddMethod(__Method_Match, serviceImpl.Match)
          .AddMethod(__Method_ChatMessageStream, serviceImpl.ChatMessageStream)
          .AddMethod(__Method_HostGame, serviceImpl.HostGame)
          .AddMethod(__Method_AvailableGames, serviceImpl.AvailableGames)
          .AddMethod(__Method_JoinGame, serviceImpl.JoinGame)
          .AddMethod(__Method_Alive, serviceImpl.Alive)
          .AddMethod(__Method_MatchEventListener, serviceImpl.MatchEventListener)
          .AddMethod(__Method_SendMove, serviceImpl.SendMove)
          .AddMethod(__Method_ChatMessageListenter, serviceImpl.ChatMessageListenter)
          .AddMethod(__Method_SendChatMessage, serviceImpl.SendChatMessage).Build();
    }

  }
}
#endregion
